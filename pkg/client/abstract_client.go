package client

import "github.com/Arman92/go-tdlib"

type AbstractClient interface {
	GetAuthorizationState() (tdlib.AuthorizationState, error)
	SetTdlibParameters(parameters *tdlib.TdlibParameters) (*tdlib.Ok, error)
	CheckDatabaseEncryptionKey(encryptionKey []byte) (*tdlib.Ok, error)
	SetAuthenticationPhoneNumber(phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.Ok, error)
	ResendAuthenticationCode() (*tdlib.Ok, error)
	CheckAuthenticationCode(code string) (*tdlib.Ok, error)
	RequestQrCodeAuthentication(otherUserIds []int32) (*tdlib.Ok, error)
	RegisterUser(firstName string, lastName string) (*tdlib.Ok, error)
	CheckAuthenticationPassword(password string) (*tdlib.Ok, error)
	RequestAuthenticationPasswordRecovery() (*tdlib.Ok, error)
	RecoverAuthenticationPassword(recoveryCode string) (*tdlib.Ok, error)
	CheckAuthenticationBotToken(token string) (*tdlib.Ok, error)
	LogOut() (*tdlib.Ok, error)
	Close() (*tdlib.Ok, error)
	Destroy() (*tdlib.Ok, error)
	ConfirmQrCodeAuthentication(link string) (*tdlib.Session, error)
	GetCurrentState() (*tdlib.Updates, error)
	SetDatabaseEncryptionKey(newEncryptionKey []byte) (*tdlib.Ok, error)
	GetPasswordState() (*tdlib.PasswordState, error)
	SetPassword(oldPassword string, newPassword string, newHint string, setRecoveryEmailAddress bool, newRecoveryEmailAddress string) (*tdlib.PasswordState, error)
	GetRecoveryEmailAddress(password string) (*tdlib.RecoveryEmailAddress, error)
	SetRecoveryEmailAddress(password string, newRecoveryEmailAddress string) (*tdlib.PasswordState, error)
	CheckRecoveryEmailAddressCode(code string) (*tdlib.PasswordState, error)
	ResendRecoveryEmailAddressCode() (*tdlib.PasswordState, error)
	RequestPasswordRecovery() (*tdlib.EmailAddressAuthenticationCodeInfo, error)
	RecoverPassword(recoveryCode string) (*tdlib.PasswordState, error)
	CreateTemporaryPassword(password string, validFor int32) (*tdlib.TemporaryPasswordState, error)
	GetTemporaryPasswordState() (*tdlib.TemporaryPasswordState, error)
	GetMe() (*tdlib.User, error)
	GetUser(userId int32) (*tdlib.User, error)
	GetUserFullInfo(userId int32) (*tdlib.UserFullInfo, error)
	GetBasicGroup(basicGroupId int32) (*tdlib.BasicGroup, error)
	GetBasicGroupFullInfo(basicGroupId int32) (*tdlib.BasicGroupFullInfo, error)
	GetSupergroup(supergroupId int32) (*tdlib.Supergroup, error)
	GetSupergroupFullInfo(supergroupId int32) (*tdlib.SupergroupFullInfo, error)
	GetSecretChat(secretChatId int32) (*tdlib.SecretChat, error)
	GetChat(chatId int64) (*tdlib.Chat, error)
	GetMessage(chatId int64, messageId int64) (*tdlib.Message, error)
	GetMessageLocally(chatId int64, messageId int64) (*tdlib.Message, error)
	GetRepliedMessage(chatId int64, messageId int64) (*tdlib.Message, error)
	GetChatPinnedMessage(chatId int64) (*tdlib.Message, error)
	GetMessages(chatId int64, messageIds []int64) (*tdlib.Messages, error)
	GetFile(fileId int32) (*tdlib.File, error)
	GetRemoteFile(remoteFileId string, fileType tdlib.FileType) (*tdlib.File, error)
	GetChats(chatList tdlib.ChatList, offsetOrder tdlib.JSONInt64, offsetChatId int64, limit int32) (*tdlib.Chats, error)
	SearchPublicChat(username string) (*tdlib.Chat, error)
	SearchPublicChats(query string) (*tdlib.Chats, error)
	SearchChats(query string, limit int32) (*tdlib.Chats, error)
	SearchChatsOnServer(query string, limit int32) (*tdlib.Chats, error)
	SearchChatsNearby(location *tdlib.Location) (*tdlib.ChatsNearby, error)
	GetTopChats(category tdlib.TopChatCategory, limit int32) (*tdlib.Chats, error)
	RemoveTopChat(category tdlib.TopChatCategory, chatId int64) (*tdlib.Ok, error)
	AddRecentlyFoundChat(chatId int64) (*tdlib.Ok, error)
	RemoveRecentlyFoundChat(chatId int64) (*tdlib.Ok, error)
	ClearRecentlyFoundChats() (*tdlib.Ok, error)
	CheckChatUsername(chatId int64, username string) (tdlib.CheckChatUsernameResult, error)
	GetCreatedPublicChats(typeParam tdlib.PublicChatType) (*tdlib.Chats, error)
	CheckCreatedPublicChatsLimit(typeParam tdlib.PublicChatType) (*tdlib.Ok, error)
	GetSuitableDiscussionChats() (*tdlib.Chats, error)
	GetInactiveSupergroupChats() (*tdlib.Chats, error)
	GetGroupsInCommon(userId int32, offsetChatId int64, limit int32) (*tdlib.Chats, error)
	GetChatHistory(chatId int64, fromMessageId int64, offset int32, limit int32, onlyLocal bool) (*tdlib.Messages, error)
	DeleteChatHistory(chatId int64, removeFromChatList bool, revoke bool) (*tdlib.Ok, error)
	SearchChatMessages(chatId int64, query string, senderUserId int32, fromMessageId int64, offset int32, limit int32, filter tdlib.SearchMessagesFilter) (*tdlib.Messages, error)
	SearchMessages(chatList tdlib.ChatList, query string, offsetDate int32, offsetChatId int64, offsetMessageId int64, limit int32) (*tdlib.Messages, error)
	SearchSecretMessages(chatId int64, query string, fromSearchId tdlib.JSONInt64, limit int32, filter tdlib.SearchMessagesFilter) (*tdlib.FoundMessages, error)
	SearchCallMessages(fromMessageId int64, limit int32, onlyMissed bool) (*tdlib.Messages, error)
	SearchChatRecentLocationMessages(chatId int64, limit int32) (*tdlib.Messages, error)
	GetActiveLiveLocationMessages() (*tdlib.Messages, error)
	GetChatMessageByDate(chatId int64, date int32) (*tdlib.Message, error)
	GetChatMessageCount(chatId int64, filter tdlib.SearchMessagesFilter, returnLocal bool) (*tdlib.Count, error)
	GetChatScheduledMessages(chatId int64) (*tdlib.Messages, error)
	RemoveNotification(notificationGroupId int32, notificationId int32) (*tdlib.Ok, error)
	RemoveNotificationGroup(notificationGroupId int32, maxNotificationId int32) (*tdlib.Ok, error)
	GetPublicMessageLink(chatId int64, messageId int64, forAlbum bool) (*tdlib.PublicMessageLink, error)
	GetMessageLink(chatId int64, messageId int64) (*tdlib.HttpUrl, error)
	GetMessageLinkInfo(url string) (*tdlib.MessageLinkInfo, error)
	SendMessage(chatId int64, replyToMessageId int64, options *tdlib.SendMessageOptions, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error)
	SendMessageAlbum(chatId int64, replyToMessageId int64, options *tdlib.SendMessageOptions, inputMessageContents []tdlib.InputMessageContent) (*tdlib.Messages, error)
	SendBotStartMessage(botUserId int32, chatId int64, parameter string) (*tdlib.Message, error)
	SendInlineQueryResultMessage(chatId int64, replyToMessageId int64, options *tdlib.SendMessageOptions, queryId tdlib.JSONInt64, resultId string, hideViaBot bool) (*tdlib.Message, error)
	ForwardMessages(chatId int64, fromChatId int64, messageIds []int64, options *tdlib.SendMessageOptions, asAlbum bool, sendCopy bool, removeCaption bool) (*tdlib.Messages, error)
	ResendMessages(chatId int64, messageIds []int64) (*tdlib.Messages, error)
	SendChatSetTtlMessage(chatId int64, ttl int32) (*tdlib.Message, error)
	SendChatScreenshotTakenNotification(chatId int64) (*tdlib.Ok, error)
	AddLocalMessage(chatId int64, senderUserId int32, replyToMessageId int64, disableNotification bool, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error)
	DeleteMessages(chatId int64, messageIds []int64, revoke bool) (*tdlib.Ok, error)
	DeleteChatMessagesFromUser(chatId int64, userId int32) (*tdlib.Ok, error)
	EditMessageText(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error)
	EditMessageLiveLocation(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup, location *tdlib.Location) (*tdlib.Message, error)
	EditMessageMedia(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error)
	EditMessageCaption(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup, caption *tdlib.FormattedText) (*tdlib.Message, error)
	EditMessageReplyMarkup(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup) (*tdlib.Message, error)
	EditInlineMessageText(inlineMessageId string, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Ok, error)
	EditInlineMessageLiveLocation(inlineMessageId string, replyMarkup tdlib.ReplyMarkup, location *tdlib.Location) (*tdlib.Ok, error)
	EditInlineMessageMedia(inlineMessageId string, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Ok, error)
	EditInlineMessageCaption(inlineMessageId string, replyMarkup tdlib.ReplyMarkup, caption *tdlib.FormattedText) (*tdlib.Ok, error)
	EditInlineMessageReplyMarkup(inlineMessageId string, replyMarkup tdlib.ReplyMarkup) (*tdlib.Ok, error)
	EditMessageSchedulingState(chatId int64, messageId int64, schedulingState tdlib.MessageSchedulingState) (*tdlib.Ok, error)
	GetTextEntities(text string) (*tdlib.TextEntities, error)
	ParseTextEntities(text string, parseMode tdlib.TextParseMode) (*tdlib.FormattedText, error)
	GetFileMimeType(fileName string) (*tdlib.Text, error)
	GetFileExtension(mimeType string) (*tdlib.Text, error)
	CleanFileName(fileName string) (*tdlib.Text, error)
	GetLanguagePackString(languagePackDatabasePath string, localizationTarget string, languagePackId string, key string) (tdlib.LanguagePackStringValue, error)
	GetJsonValue(jValue string) (tdlib.JsonValue, error)
	GetJsonString(jsonValue tdlib.JsonValue) (*tdlib.Text, error)
	SetPollAnswer(chatId int64, messageId int64, optionIds []int32) (*tdlib.Ok, error)
	GetPollVoters(chatId int64, messageId int64, optionId int32, offset int32, limit int32) (*tdlib.Users, error)
	StopPoll(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup) (*tdlib.Ok, error)
	GetLoginUrlInfo(chatId int64, messageId int64, buttonId int32) (tdlib.LoginUrlInfo, error)
	GetLoginUrl(chatId int64, messageId int64, buttonId int32, allowWriteAccess bool) (*tdlib.HttpUrl, error)
	GetInlineQueryResults(botUserId int32, chatId int64, userLocation *tdlib.Location, query string, offset string) (*tdlib.InlineQueryResults, error)
	AnswerInlineQuery(inlineQueryId tdlib.JSONInt64, isPersonal bool, results []tdlib.InputInlineQueryResult, cacheTime int32, nextOffset string, switchPmText string, switchPmParameter string) (*tdlib.Ok, error)
	GetCallbackQueryAnswer(chatId int64, messageId int64, payload tdlib.CallbackQueryPayload) (*tdlib.CallbackQueryAnswer, error)
	AnswerCallbackQuery(callbackQueryId tdlib.JSONInt64, text string, showAlert bool, url string, cacheTime int32) (*tdlib.Ok, error)
	AnswerShippingQuery(shippingQueryId tdlib.JSONInt64, shippingOptions []tdlib.ShippingOption, errorMessage string) (*tdlib.Ok, error)
	AnswerPreCheckoutQuery(preCheckoutQueryId tdlib.JSONInt64, errorMessage string) (*tdlib.Ok, error)
	SetGameScore(chatId int64, messageId int64, editMessage bool, userId int32, score int32, force bool) (*tdlib.Message, error)
	SetInlineGameScore(inlineMessageId string, editMessage bool, userId int32, score int32, force bool) (*tdlib.Ok, error)
	GetGameHighScores(chatId int64, messageId int64, userId int32) (*tdlib.GameHighScores, error)
	GetInlineGameHighScores(inlineMessageId string, userId int32) (*tdlib.GameHighScores, error)
	DeleteChatReplyMarkup(chatId int64, messageId int64) (*tdlib.Ok, error)
	SendChatAction(chatId int64, action tdlib.ChatAction) (*tdlib.Ok, error)
	OpenChat(chatId int64) (*tdlib.Ok, error)
	CloseChat(chatId int64) (*tdlib.Ok, error)
	ViewMessages(chatId int64, messageIds []int64, forceRead bool) (*tdlib.Ok, error)
	OpenMessageContent(chatId int64, messageId int64) (*tdlib.Ok, error)
	ReadAllChatMentions(chatId int64) (*tdlib.Ok, error)
	CreatePrivateChat(userId int32, force bool) (*tdlib.Chat, error)
	CreateBasicGroupChat(basicGroupId int32, force bool) (*tdlib.Chat, error)
	CreateSupergroupChat(supergroupId int32, force bool) (*tdlib.Chat, error)
	CreateSecretChat(secretChatId int32) (*tdlib.Chat, error)
	CreateNewBasicGroupChat(userIds []int32, title string) (*tdlib.Chat, error)
	CreateNewSupergroupChat(title string, isChannel bool, description string, location *tdlib.ChatLocation) (*tdlib.Chat, error)
	CreateNewSecretChat(userId int32) (*tdlib.Chat, error)
	UpgradeBasicGroupChatToSupergroupChat(chatId int64) (*tdlib.Chat, error)
	SetChatChatList(chatId int64, chatList tdlib.ChatList) (*tdlib.Ok, error)
	SetChatTitle(chatId int64, title string) (*tdlib.Ok, error)
	SetChatPhoto(chatId int64, photo tdlib.InputFile) (*tdlib.Ok, error)
	SetChatPermissions(chatId int64, permissions *tdlib.ChatPermissions) (*tdlib.Ok, error)
	SetChatDraftMessage(chatId int64, draftMessage *tdlib.DraftMessage) (*tdlib.Ok, error)
	SetChatNotificationSettings(chatId int64, notificationSettings *tdlib.ChatNotificationSettings) (*tdlib.Ok, error)
	ToggleChatIsPinned(chatId int64, isPinned bool) (*tdlib.Ok, error)
	ToggleChatIsMarkedAsUnread(chatId int64, isMarkedAsUnread bool) (*tdlib.Ok, error)
	ToggleChatDefaultDisableNotification(chatId int64, defaultDisableNotification bool) (*tdlib.Ok, error)
	SetChatClientData(chatId int64, clientData string) (*tdlib.Ok, error)
	SetChatDescription(chatId int64, description string) (*tdlib.Ok, error)
	SetChatDiscussionGroup(chatId int64, discussionChatId int64) (*tdlib.Ok, error)
	SetChatLocation(chatId int64, location *tdlib.ChatLocation) (*tdlib.Ok, error)
	SetChatSlowModeDelay(chatId int64, slowModeDelay int32) (*tdlib.Ok, error)
	PinChatMessage(chatId int64, messageId int64, disableNotification bool) (*tdlib.Ok, error)
	UnpinChatMessage(chatId int64) (*tdlib.Ok, error)
	JoinChat(chatId int64) (*tdlib.Ok, error)
	LeaveChat(chatId int64) (*tdlib.Ok, error)
	AddChatMember(chatId int64, userId int32, forwardLimit int32) (*tdlib.Ok, error)
	AddChatMembers(chatId int64, userIds []int32) (*tdlib.Ok, error)
	SetChatMemberStatus(chatId int64, userId int32, status tdlib.ChatMemberStatus) (*tdlib.Ok, error)
	CanTransferOwnership() (tdlib.CanTransferOwnershipResult, error)
	TransferChatOwnership(chatId int64, userId int32, password string) (*tdlib.Ok, error)
	GetChatMember(chatId int64, userId int32) (*tdlib.ChatMember, error)
	SearchChatMembers(chatId int64, query string, limit int32, filter tdlib.ChatMembersFilter) (*tdlib.ChatMembers, error)
	GetChatAdministrators(chatId int64) (*tdlib.ChatAdministrators, error)
	ClearAllDraftMessages(excludeSecretChats bool) (*tdlib.Ok, error)
	GetChatNotificationSettingsExceptions(scope tdlib.NotificationSettingsScope, compareSound bool) (*tdlib.Chats, error)
	GetScopeNotificationSettings(scope tdlib.NotificationSettingsScope) (*tdlib.ScopeNotificationSettings, error)
	SetScopeNotificationSettings(scope tdlib.NotificationSettingsScope, notificationSettings *tdlib.ScopeNotificationSettings) (*tdlib.Ok, error)
	ResetAllNotificationSettings() (*tdlib.Ok, error)
	SetPinnedChats(chatList tdlib.ChatList, chatIds []int64) (*tdlib.Ok, error)
	DownloadFile(fileId int32, priority int32, offset int32, limit int32, synchronous bool) (*tdlib.File, error)
	GetFileDownloadedPrefixSize(fileId int32, offset int32) (*tdlib.Count, error)
	CancelDownloadFile(fileId int32, onlyIfPending bool) (*tdlib.Ok, error)
	UploadFile(file tdlib.InputFile, fileType tdlib.FileType, priority int32) (*tdlib.File, error)
	CancelUploadFile(fileId int32) (*tdlib.Ok, error)
	WriteGeneratedFilePart(generationId tdlib.JSONInt64, offset int32, data []byte) (*tdlib.Ok, error)
	SetFileGenerationProgress(generationId tdlib.JSONInt64, expectedSize int32, localPrefixSize int32) (*tdlib.Ok, error)
	FinishFileGeneration(generationId tdlib.JSONInt64, error *tdlib.Error) (*tdlib.Ok, error)
	ReadFilePart(fileId int32, offset int32, count int32) (*tdlib.FilePart, error)
	DeleteFile(fileId int32) (*tdlib.Ok, error)
	GenerateChatInviteLink(chatId int64) (*tdlib.ChatInviteLink, error)
	CheckChatInviteLink(inviteLink string) (*tdlib.ChatInviteLinkInfo, error)
	JoinChatByInviteLink(inviteLink string) (*tdlib.Chat, error)
	CreateCall(userId int32, protocol *tdlib.CallProtocol) (*tdlib.CallId, error)
	AcceptCall(callId int32, protocol *tdlib.CallProtocol) (*tdlib.Ok, error)
	DiscardCall(callId int32, isDisconnected bool, duration int32, connectionId tdlib.JSONInt64) (*tdlib.Ok, error)
	SendCallRating(callId int32, rating int32, comment string, problems []tdlib.CallProblem) (*tdlib.Ok, error)
	SendCallDebugInformation(callId int32, debugInformation string) (*tdlib.Ok, error)
	BlockUser(userId int32) (*tdlib.Ok, error)
	UnblockUser(userId int32) (*tdlib.Ok, error)
	GetBlockedUsers(offset int32, limit int32) (*tdlib.Users, error)
	AddContact(contact *tdlib.Contact, sharePhoneNumber bool) (*tdlib.Ok, error)
	ImportContacts(contacts []tdlib.Contact) (*tdlib.ImportedContacts, error)
	GetContacts() (*tdlib.Users, error)
	SearchContacts(query string, limit int32) (*tdlib.Users, error)
	RemoveContacts(userIds []int32) (*tdlib.Ok, error)
	GetImportedContactCount() (*tdlib.Count, error)
	ChangeImportedContacts(contacts []tdlib.Contact) (*tdlib.ImportedContacts, error)
	ClearImportedContacts() (*tdlib.Ok, error)
	SharePhoneNumber(userId int32) (*tdlib.Ok, error)
	GetUserProfilePhotos(userId int32, offset int32, limit int32) (*tdlib.UserProfilePhotos, error)
	GetStickers(emoji string, limit int32) (*tdlib.Stickers, error)
	SearchStickers(emoji string, limit int32) (*tdlib.Stickers, error)
	GetInstalledStickerSets(isMasks bool) (*tdlib.StickerSets, error)
	GetArchivedStickerSets(isMasks bool, offsetStickerSetId tdlib.JSONInt64, limit int32) (*tdlib.StickerSets, error)
	GetTrendingStickerSets() (*tdlib.StickerSets, error)
	GetAttachedStickerSets(fileId int32) (*tdlib.StickerSets, error)
	GetStickerSet(setId tdlib.JSONInt64) (*tdlib.StickerSet, error)
	SearchStickerSet(name string) (*tdlib.StickerSet, error)
	SearchInstalledStickerSets(isMasks bool, query string, limit int32) (*tdlib.StickerSets, error)
	SearchStickerSets(query string) (*tdlib.StickerSets, error)
	ChangeStickerSet(setId tdlib.JSONInt64, isInstalled bool, isArchived bool) (*tdlib.Ok, error)
	ViewTrendingStickerSets(stickerSetIds []tdlib.JSONInt64) (*tdlib.Ok, error)
	ReorderInstalledStickerSets(isMasks bool, stickerSetIds []tdlib.JSONInt64) (*tdlib.Ok, error)
	GetRecentStickers(isAttached bool) (*tdlib.Stickers, error)
	AddRecentSticker(isAttached bool, sticker tdlib.InputFile) (*tdlib.Stickers, error)
	RemoveRecentSticker(isAttached bool, sticker tdlib.InputFile) (*tdlib.Ok, error)
	ClearRecentStickers(isAttached bool) (*tdlib.Ok, error)
	GetFavoriteStickers() (*tdlib.Stickers, error)
	AddFavoriteSticker(sticker tdlib.InputFile) (*tdlib.Ok, error)
	RemoveFavoriteSticker(sticker tdlib.InputFile) (*tdlib.Ok, error)
	GetStickerEmojis(sticker tdlib.InputFile) (*tdlib.Emojis, error)
	SearchEmojis(text string, exactMatch bool, inputLanguageCode string) (*tdlib.Emojis, error)
	GetEmojiSuggestionsUrl(languageCode string) (*tdlib.HttpUrl, error)
	GetSavedAnimations() (*tdlib.Animations, error)
	AddSavedAnimation(animation tdlib.InputFile) (*tdlib.Ok, error)
	RemoveSavedAnimation(animation tdlib.InputFile) (*tdlib.Ok, error)
	GetRecentInlineBots() (*tdlib.Users, error)
	SearchHashtags(prefix string, limit int32) (*tdlib.Hashtags, error)
	RemoveRecentHashtag(hashtag string) (*tdlib.Ok, error)
	GetWebPagePreview(text *tdlib.FormattedText) (*tdlib.WebPage, error)
	GetWebPageInstantView(url string, forceFull bool) (*tdlib.WebPageInstantView, error)
	SetProfilePhoto(photo tdlib.InputFile) (*tdlib.Ok, error)
	DeleteProfilePhoto(profilePhotoId tdlib.JSONInt64) (*tdlib.Ok, error)
	SetName(firstName string, lastName string) (*tdlib.Ok, error)
	SetBio(bio string) (*tdlib.Ok, error)
	SetUsername(username string) (*tdlib.Ok, error)
	ChangePhoneNumber(phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.AuthenticationCodeInfo, error)
	ResendChangePhoneNumberCode() (*tdlib.AuthenticationCodeInfo, error)
	CheckChangePhoneNumberCode(code string) (*tdlib.Ok, error)
	GetActiveSessions() (*tdlib.Sessions, error)
	TerminateSession(sessionId tdlib.JSONInt64) (*tdlib.Ok, error)
	TerminateAllOtherSessions() (*tdlib.Ok, error)
	GetConnectedWebsites() (*tdlib.ConnectedWebsites, error)
	DisconnectWebsite(websiteId tdlib.JSONInt64) (*tdlib.Ok, error)
	DisconnectAllWebsites() (*tdlib.Ok, error)
	SetSupergroupUsername(supergroupId int32, username string) (*tdlib.Ok, error)
	SetSupergroupStickerSet(supergroupId int32, stickerSetId tdlib.JSONInt64) (*tdlib.Ok, error)
	ToggleSupergroupSignMessages(supergroupId int32, signMessages bool) (*tdlib.Ok, error)
	ToggleSupergroupIsAllHistoryAvailable(supergroupId int32, isAllHistoryAvailable bool) (*tdlib.Ok, error)
	ReportSupergroupSpam(supergroupId int32, userId int32, messageIds []int64) (*tdlib.Ok, error)
	GetSupergroupMembers(supergroupId int32, filter tdlib.SupergroupMembersFilter, offset int32, limit int32) (*tdlib.ChatMembers, error)
	DeleteSupergroup(supergroupId int32) (*tdlib.Ok, error)
	CloseSecretChat(secretChatId int32) (*tdlib.Ok, error)
	GetChatEventLog(chatId int64, query string, fromEventId tdlib.JSONInt64, limit int32, filters *tdlib.ChatEventLogFilters, userIds []int32) (*tdlib.ChatEvents, error)
	GetPaymentForm(chatId int64, messageId int64) (*tdlib.PaymentForm, error)
	ValidateOrderInfo(chatId int64, messageId int64, orderInfo *tdlib.OrderInfo, allowSave bool) (*tdlib.ValidatedOrderInfo, error)
	SendPaymentForm(chatId int64, messageId int64, orderInfoId string, shippingOptionId string, credentials tdlib.InputCredentials) (*tdlib.PaymentResult, error)
	GetPaymentReceipt(chatId int64, messageId int64) (*tdlib.PaymentReceipt, error)
	GetSavedOrderInfo() (*tdlib.OrderInfo, error)
	DeleteSavedOrderInfo() (*tdlib.Ok, error)
	DeleteSavedCredentials() (*tdlib.Ok, error)
	GetSupportUser() (*tdlib.User, error)
	GetBackgrounds(forDarkTheme bool) (*tdlib.Backgrounds, error)
	GetBackgroundUrl(name string, typeParam tdlib.BackgroundType) (*tdlib.HttpUrl, error)
	SearchBackground(name string) (*tdlib.Background, error)
	SetBackground(background tdlib.InputBackground, typeParam tdlib.BackgroundType, forDarkTheme bool) (*tdlib.Background, error)
	RemoveBackground(backgroundId tdlib.JSONInt64) (*tdlib.Ok, error)
	ResetBackgrounds() (*tdlib.Ok, error)
	GetLocalizationTargetInfo(onlyLocal bool) (*tdlib.LocalizationTargetInfo, error)
	GetLanguagePackInfo(languagePackId string) (*tdlib.LanguagePackInfo, error)
	GetLanguagePackStrings(languagePackId string, keys []string) (*tdlib.LanguagePackStrings, error)
	SynchronizeLanguagePack(languagePackId string) (*tdlib.Ok, error)
	AddCustomServerLanguagePack(languagePackId string) (*tdlib.Ok, error)
	SetCustomLanguagePack(info *tdlib.LanguagePackInfo, strings []tdlib.LanguagePackString) (*tdlib.Ok, error)
	EditCustomLanguagePackInfo(info *tdlib.LanguagePackInfo) (*tdlib.Ok, error)
	SetCustomLanguagePackString(languagePackId string, newString *tdlib.LanguagePackString) (*tdlib.Ok, error)
	DeleteLanguagePack(languagePackId string) (*tdlib.Ok, error)
	RegisterDevice(deviceToken tdlib.DeviceToken, otherUserIds []int32) (*tdlib.PushReceiverId, error)
	ProcessPushNotification(payload string) (*tdlib.Ok, error)
	GetPushReceiverId(payload string) (*tdlib.PushReceiverId, error)
	GetRecentlyVisitedTMeUrls(referrer string) (*tdlib.TMeUrls, error)
	SetUserPrivacySettingRules(setting tdlib.UserPrivacySetting, rules *tdlib.UserPrivacySettingRules) (*tdlib.Ok, error)
	GetUserPrivacySettingRules(setting tdlib.UserPrivacySetting) (*tdlib.UserPrivacySettingRules, error)
	GetOption(name string) (tdlib.OptionValue, error)
	SetOption(name string, value tdlib.OptionValue) (*tdlib.Ok, error)
	SetAccountTtl(ttl *tdlib.AccountTtl) (*tdlib.Ok, error)
	GetAccountTtl() (*tdlib.AccountTtl, error)
	DeleteAccount(reason string) (*tdlib.Ok, error)
	RemoveChatActionBar(chatId int64) (*tdlib.Ok, error)
	ReportChat(chatId int64, reason tdlib.ChatReportReason, messageIds []int64) (*tdlib.Ok, error)
	GetChatStatisticsUrl(chatId int64, parameters string, isDark bool) (*tdlib.HttpUrl, error)
	GetStorageStatistics(chatLimit int32) (*tdlib.StorageStatistics, error)
	GetStorageStatisticsFast() (*tdlib.StorageStatisticsFast, error)
	GetDatabaseStatistics() (*tdlib.DatabaseStatistics, error)
	OptimizeStorage(size int64, ttl int32, count int32, immunityDelay int32, fileTypes []tdlib.FileType, chatIds []int64, excludeChatIds []int64, chatLimit int32) (*tdlib.StorageStatistics, error)
	SetNetworkType(typeParam tdlib.NetworkType) (*tdlib.Ok, error)
	GetNetworkStatistics(onlyCurrent bool) (*tdlib.NetworkStatistics, error)
	AddNetworkStatistics(entry tdlib.NetworkStatisticsEntry) (*tdlib.Ok, error)
	ResetNetworkStatistics() (*tdlib.Ok, error)
	GetAutoDownloadSettingsPresets() (*tdlib.AutoDownloadSettingsPresets, error)
	SetAutoDownloadSettings(settings *tdlib.AutoDownloadSettings, typeParam tdlib.NetworkType) (*tdlib.Ok, error)
	GetPassportElement(typeParam tdlib.PassportElementType, password string) (tdlib.PassportElement, error)
	GetAllPassportElements(password string) (*tdlib.PassportElements, error)
	SetPassportElement(element tdlib.InputPassportElement, password string) (tdlib.PassportElement, error)
	DeletePassportElement(typeParam tdlib.PassportElementType) (*tdlib.Ok, error)
	SetPassportElementErrors(userId int32, errors []tdlib.InputPassportElementError) (*tdlib.Ok, error)
	GetPreferredCountryLanguage(countryCode string) (*tdlib.Text, error)
	SendPhoneNumberVerificationCode(phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.AuthenticationCodeInfo, error)
	ResendPhoneNumberVerificationCode() (*tdlib.AuthenticationCodeInfo, error)
	CheckPhoneNumberVerificationCode(code string) (*tdlib.Ok, error)
	SendEmailAddressVerificationCode(emailAddress string) (*tdlib.EmailAddressAuthenticationCodeInfo, error)
	ResendEmailAddressVerificationCode() (*tdlib.EmailAddressAuthenticationCodeInfo, error)
	CheckEmailAddressVerificationCode(code string) (*tdlib.Ok, error)
	GetPassportAuthorizationForm(botUserId int32, scope string, publicKey string, nonce string) (*tdlib.PassportAuthorizationForm, error)
	GetPassportAuthorizationFormAvailableElements(autorizationFormId int32, password string) (*tdlib.PassportElementsWithErrors, error)
	SendPassportAuthorizationForm(autorizationFormId int32, typeParams []tdlib.PassportElementType) (*tdlib.Ok, error)
	SendPhoneNumberConfirmationCode(hash string, phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.AuthenticationCodeInfo, error)
	ResendPhoneNumberConfirmationCode() (*tdlib.AuthenticationCodeInfo, error)
	CheckPhoneNumberConfirmationCode(code string) (*tdlib.Ok, error)
	SetBotUpdatesStatus(pendingUpdateCount int32, errorMessage string) (*tdlib.Ok, error)
	UploadStickerFile(userId int32, pngSticker tdlib.InputFile) (*tdlib.File, error)
	CreateNewStickerSet(userId int32, title string, name string, isMasks bool, stickers []tdlib.InputSticker) (*tdlib.StickerSet, error)
	AddStickerToSet(userId int32, name string, sticker *tdlib.InputSticker) (*tdlib.StickerSet, error)
	SetStickerPositionInSet(sticker tdlib.InputFile, position int32) (*tdlib.Ok, error)
	RemoveStickerFromSet(sticker tdlib.InputFile) (*tdlib.Ok, error)
	GetMapThumbnailFile(location *tdlib.Location, zoom int32, width int32, height int32, scale int32, chatId int64) (*tdlib.File, error)
	AcceptTermsOfService(termsOfServiceId string) (*tdlib.Ok, error)
	SendCustomRequest(method string, parameters string) (*tdlib.CustomRequestResult, error)
	AnswerCustomQuery(customQueryId tdlib.JSONInt64, data string) (*tdlib.Ok, error)
	SetAlarm(seconds float64) (*tdlib.Ok, error)
	GetCountryCode() (*tdlib.Text, error)
	GetInviteText() (*tdlib.Text, error)
	GetDeepLinkInfo(link string) (*tdlib.DeepLinkInfo, error)
	GetApplicationConfig() (tdlib.JsonValue, error)
	SaveApplicationLogEvent(typeParam string, chatId int64, data tdlib.JsonValue) (*tdlib.Ok, error)
	AddProxy(server string, port int32, enable bool, typeParam tdlib.ProxyType) (*tdlib.Proxy, error)
	EditProxy(proxyId int32, server string, port int32, enable bool, typeParam tdlib.ProxyType) (*tdlib.Proxy, error)
	EnableProxy(proxyId int32) (*tdlib.Ok, error)
	DisableProxy() (*tdlib.Ok, error)
	RemoveProxy(proxyId int32) (*tdlib.Ok, error)
	GetProxies() (*tdlib.Proxies, error)
	GetProxyLink(proxyId int32) (*tdlib.Text, error)
	PingProxy(proxyId int32) (*tdlib.Seconds, error)
	SetLogStream(logStream tdlib.LogStream) (*tdlib.Ok, error)
	GetLogStream() (tdlib.LogStream, error)
	SetLogVerbosityLevel(newVerbosityLevel int32) (*tdlib.Ok, error)
	GetLogVerbosityLevel() (*tdlib.LogVerbosityLevel, error)
	GetLogTags() (*tdlib.LogTags, error)
	SetLogTagVerbosityLevel(tag string, newVerbosityLevel int32) (*tdlib.Ok, error)
	GetLogTagVerbosityLevel(tag string) (*tdlib.LogVerbosityLevel, error)
	AddLogMessage(verbosityLevel int32, text string) (*tdlib.Ok, error)
	TestCallEmpty() (*tdlib.Ok, error)
	TestCallString(x string) (*tdlib.TestString, error)
	TestCallBytes(x []byte) (*tdlib.TestBytes, error)
	TestCallVectorInt(x []int32) (*tdlib.TestVectorInt, error)
	TestCallVectorIntObject(x []tdlib.TestInt) (*tdlib.TestVectorIntObject, error)
	TestCallVectorString(x []string) (*tdlib.TestVectorString, error)
	TestCallVectorStringObject(x []tdlib.TestString) (*tdlib.TestVectorStringObject, error)
	TestSquareInt(x int32) (*tdlib.TestInt, error)
	TestNetwork() (*tdlib.Ok, error)
	TestProxy(server string, port int32, typeParam tdlib.ProxyType, dcId int32, timeout float64) (*tdlib.Ok, error)
	TestGetDifference() (*tdlib.Ok, error)
	TestUseUpdate() (tdlib.Update, error)
	TestReturnError(error *tdlib.Error) (*tdlib.Error, error)
	GetRawUpdatesChannel(capacity int) chan tdlib.UpdateMsg
	AddEventReceiver(msgInstance tdlib.TdMessage, filterFunc tdlib.EventFilterFunc, channelCapacity int) tdlib.EventReceiver
	DestroyInstance()
	Send(jsonQuery interface{})
	Receive(timeout float64) []byte
	Execute(jsonQuery interface{}) tdlib.UpdateMsg
	SendAndCatch(jsonQuery interface{}) (tdlib.UpdateMsg, error)
	Authorize() (tdlib.AuthorizationState, error)
	SendPhoneNumber(phoneNumber string) (tdlib.AuthorizationState, error)
	SendAuthCode(code string) (tdlib.AuthorizationState, error)
	SendAuthPassword(password string) (tdlib.AuthorizationState, error)
}
