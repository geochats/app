// Code generated by mockery v1.0.0. DO NOT EDIT.

package client

import mock "github.com/stretchr/testify/mock"
import tdlib "github.com/Arman92/go-tdlib"

// Mock is an autogenerated mock type for the Mock type
type Mock struct {
	mock.Mock
}

// AcceptCall provides a mock function with given fields: callId, protocol
func (_m *Mock) AcceptCall(callId int32, protocol *tdlib.CallProtocol) (*tdlib.Ok, error) {
	ret := _m.Called(callId, protocol)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, *tdlib.CallProtocol) *tdlib.Ok); ok {
		r0 = rf(callId, protocol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, *tdlib.CallProtocol) error); ok {
		r1 = rf(callId, protocol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptTermsOfService provides a mock function with given fields: termsOfServiceId
func (_m *Mock) AcceptTermsOfService(termsOfServiceId string) (*tdlib.Ok, error) {
	ret := _m.Called(termsOfServiceId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(termsOfServiceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(termsOfServiceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddChatMember provides a mock function with given fields: chatId, userId, forwardLimit
func (_m *Mock) AddChatMember(chatId int64, userId int32, forwardLimit int32) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, userId, forwardLimit)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int32, int32) *tdlib.Ok); ok {
		r0 = rf(chatId, userId, forwardLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32, int32) error); ok {
		r1 = rf(chatId, userId, forwardLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddChatMembers provides a mock function with given fields: chatId, userIds
func (_m *Mock) AddChatMembers(chatId int64, userIds []int32) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, userIds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, []int32) *tdlib.Ok); ok {
		r0 = rf(chatId, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, []int32) error); ok {
		r1 = rf(chatId, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddContact provides a mock function with given fields: contact, sharePhoneNumber
func (_m *Mock) AddContact(contact *tdlib.Contact, sharePhoneNumber bool) (*tdlib.Ok, error) {
	ret := _m.Called(contact, sharePhoneNumber)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(*tdlib.Contact, bool) *tdlib.Ok); ok {
		r0 = rf(contact, sharePhoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.Contact, bool) error); ok {
		r1 = rf(contact, sharePhoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCustomServerLanguagePack provides a mock function with given fields: languagePackId
func (_m *Mock) AddCustomServerLanguagePack(languagePackId string) (*tdlib.Ok, error) {
	ret := _m.Called(languagePackId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(languagePackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(languagePackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddEventReceiver provides a mock function with given fields: msgInstance, filterFunc, channelCapacity
func (_m *Mock) AddEventReceiver(msgInstance tdlib.TdMessage, filterFunc tdlib.EventFilterFunc, channelCapacity int) tdlib.EventReceiver {
	ret := _m.Called(msgInstance, filterFunc, channelCapacity)

	var r0 tdlib.EventReceiver
	if rf, ok := ret.Get(0).(func(tdlib.TdMessage, tdlib.EventFilterFunc, int) tdlib.EventReceiver); ok {
		r0 = rf(msgInstance, filterFunc, channelCapacity)
	} else {
		r0 = ret.Get(0).(tdlib.EventReceiver)
	}

	return r0
}

// AddFavoriteSticker provides a mock function with given fields: sticker
func (_m *Mock) AddFavoriteSticker(sticker tdlib.InputFile) (*tdlib.Ok, error) {
	ret := _m.Called(sticker)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.InputFile) *tdlib.Ok); ok {
		r0 = rf(sticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputFile) error); ok {
		r1 = rf(sticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddLocalMessage provides a mock function with given fields: chatId, senderUserId, replyToMessageId, disableNotification, inputMessageContent
func (_m *Mock) AddLocalMessage(chatId int64, senderUserId int32, replyToMessageId int64, disableNotification bool, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error) {
	ret := _m.Called(chatId, senderUserId, replyToMessageId, disableNotification, inputMessageContent)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int32, int64, bool, tdlib.InputMessageContent) *tdlib.Message); ok {
		r0 = rf(chatId, senderUserId, replyToMessageId, disableNotification, inputMessageContent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32, int64, bool, tdlib.InputMessageContent) error); ok {
		r1 = rf(chatId, senderUserId, replyToMessageId, disableNotification, inputMessageContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddLogMessage provides a mock function with given fields: verbosityLevel, text
func (_m *Mock) AddLogMessage(verbosityLevel int32, text string) (*tdlib.Ok, error) {
	ret := _m.Called(verbosityLevel, text)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, string) *tdlib.Ok); ok {
		r0 = rf(verbosityLevel, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, string) error); ok {
		r1 = rf(verbosityLevel, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNetworkStatistics provides a mock function with given fields: entry
func (_m *Mock) AddNetworkStatistics(entry tdlib.NetworkStatisticsEntry) (*tdlib.Ok, error) {
	ret := _m.Called(entry)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.NetworkStatisticsEntry) *tdlib.Ok); ok {
		r0 = rf(entry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.NetworkStatisticsEntry) error); ok {
		r1 = rf(entry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddProxy provides a mock function with given fields: server, port, enable, typeParam
func (_m *Mock) AddProxy(server string, port int32, enable bool, typeParam tdlib.ProxyType) (*tdlib.Proxy, error) {
	ret := _m.Called(server, port, enable, typeParam)

	var r0 *tdlib.Proxy
	if rf, ok := ret.Get(0).(func(string, int32, bool, tdlib.ProxyType) *tdlib.Proxy); ok {
		r0 = rf(server, port, enable, typeParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Proxy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32, bool, tdlib.ProxyType) error); ok {
		r1 = rf(server, port, enable, typeParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRecentSticker provides a mock function with given fields: isAttached, sticker
func (_m *Mock) AddRecentSticker(isAttached bool, sticker tdlib.InputFile) (*tdlib.Stickers, error) {
	ret := _m.Called(isAttached, sticker)

	var r0 *tdlib.Stickers
	if rf, ok := ret.Get(0).(func(bool, tdlib.InputFile) *tdlib.Stickers); ok {
		r0 = rf(isAttached, sticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Stickers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, tdlib.InputFile) error); ok {
		r1 = rf(isAttached, sticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRecentlyFoundChat provides a mock function with given fields: chatId
func (_m *Mock) AddRecentlyFoundChat(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSavedAnimation provides a mock function with given fields: animation
func (_m *Mock) AddSavedAnimation(animation tdlib.InputFile) (*tdlib.Ok, error) {
	ret := _m.Called(animation)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.InputFile) *tdlib.Ok); ok {
		r0 = rf(animation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputFile) error); ok {
		r1 = rf(animation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddStickerToSet provides a mock function with given fields: userId, name, sticker
func (_m *Mock) AddStickerToSet(userId int32, name string, sticker *tdlib.InputSticker) (*tdlib.StickerSet, error) {
	ret := _m.Called(userId, name, sticker)

	var r0 *tdlib.StickerSet
	if rf, ok := ret.Get(0).(func(int32, string, *tdlib.InputSticker) *tdlib.StickerSet); ok {
		r0 = rf(userId, name, sticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, string, *tdlib.InputSticker) error); ok {
		r1 = rf(userId, name, sticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnswerCallbackQuery provides a mock function with given fields: callbackQueryId, text, showAlert, url, cacheTime
func (_m *Mock) AnswerCallbackQuery(callbackQueryId tdlib.JSONInt64, text string, showAlert bool, url string, cacheTime int32) (*tdlib.Ok, error) {
	ret := _m.Called(callbackQueryId, text, showAlert, url, cacheTime)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64, string, bool, string, int32) *tdlib.Ok); ok {
		r0 = rf(callbackQueryId, text, showAlert, url, cacheTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64, string, bool, string, int32) error); ok {
		r1 = rf(callbackQueryId, text, showAlert, url, cacheTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnswerCustomQuery provides a mock function with given fields: customQueryId, data
func (_m *Mock) AnswerCustomQuery(customQueryId tdlib.JSONInt64, data string) (*tdlib.Ok, error) {
	ret := _m.Called(customQueryId, data)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64, string) *tdlib.Ok); ok {
		r0 = rf(customQueryId, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64, string) error); ok {
		r1 = rf(customQueryId, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnswerInlineQuery provides a mock function with given fields: inlineQueryId, isPersonal, results, cacheTime, nextOffset, switchPmText, switchPmParameter
func (_m *Mock) AnswerInlineQuery(inlineQueryId tdlib.JSONInt64, isPersonal bool, results []tdlib.InputInlineQueryResult, cacheTime int32, nextOffset string, switchPmText string, switchPmParameter string) (*tdlib.Ok, error) {
	ret := _m.Called(inlineQueryId, isPersonal, results, cacheTime, nextOffset, switchPmText, switchPmParameter)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64, bool, []tdlib.InputInlineQueryResult, int32, string, string, string) *tdlib.Ok); ok {
		r0 = rf(inlineQueryId, isPersonal, results, cacheTime, nextOffset, switchPmText, switchPmParameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64, bool, []tdlib.InputInlineQueryResult, int32, string, string, string) error); ok {
		r1 = rf(inlineQueryId, isPersonal, results, cacheTime, nextOffset, switchPmText, switchPmParameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnswerPreCheckoutQuery provides a mock function with given fields: preCheckoutQueryId, errorMessage
func (_m *Mock) AnswerPreCheckoutQuery(preCheckoutQueryId tdlib.JSONInt64, errorMessage string) (*tdlib.Ok, error) {
	ret := _m.Called(preCheckoutQueryId, errorMessage)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64, string) *tdlib.Ok); ok {
		r0 = rf(preCheckoutQueryId, errorMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64, string) error); ok {
		r1 = rf(preCheckoutQueryId, errorMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnswerShippingQuery provides a mock function with given fields: shippingQueryId, shippingOptions, errorMessage
func (_m *Mock) AnswerShippingQuery(shippingQueryId tdlib.JSONInt64, shippingOptions []tdlib.ShippingOption, errorMessage string) (*tdlib.Ok, error) {
	ret := _m.Called(shippingQueryId, shippingOptions, errorMessage)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64, []tdlib.ShippingOption, string) *tdlib.Ok); ok {
		r0 = rf(shippingQueryId, shippingOptions, errorMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64, []tdlib.ShippingOption, string) error); ok {
		r1 = rf(shippingQueryId, shippingOptions, errorMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authorize provides a mock function with given fields:
func (_m *Mock) Authorize() (tdlib.AuthorizationState, error) {
	ret := _m.Called()

	var r0 tdlib.AuthorizationState
	if rf, ok := ret.Get(0).(func() tdlib.AuthorizationState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.AuthorizationState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockUser provides a mock function with given fields: userId
func (_m *Mock) BlockUser(userId int32) (*tdlib.Ok, error) {
	ret := _m.Called(userId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanTransferOwnership provides a mock function with given fields:
func (_m *Mock) CanTransferOwnership() (tdlib.CanTransferOwnershipResult, error) {
	ret := _m.Called()

	var r0 tdlib.CanTransferOwnershipResult
	if rf, ok := ret.Get(0).(func() tdlib.CanTransferOwnershipResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.CanTransferOwnershipResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelDownloadFile provides a mock function with given fields: fileId, onlyIfPending
func (_m *Mock) CancelDownloadFile(fileId int32, onlyIfPending bool) (*tdlib.Ok, error) {
	ret := _m.Called(fileId, onlyIfPending)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, bool) *tdlib.Ok); ok {
		r0 = rf(fileId, onlyIfPending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, bool) error); ok {
		r1 = rf(fileId, onlyIfPending)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelUploadFile provides a mock function with given fields: fileId
func (_m *Mock) CancelUploadFile(fileId int32) (*tdlib.Ok, error) {
	ret := _m.Called(fileId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeImportedContacts provides a mock function with given fields: contacts
func (_m *Mock) ChangeImportedContacts(contacts []tdlib.Contact) (*tdlib.ImportedContacts, error) {
	ret := _m.Called(contacts)

	var r0 *tdlib.ImportedContacts
	if rf, ok := ret.Get(0).(func([]tdlib.Contact) *tdlib.ImportedContacts); ok {
		r0 = rf(contacts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ImportedContacts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]tdlib.Contact) error); ok {
		r1 = rf(contacts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePhoneNumber provides a mock function with given fields: phoneNumber, settings
func (_m *Mock) ChangePhoneNumber(phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.AuthenticationCodeInfo, error) {
	ret := _m.Called(phoneNumber, settings)

	var r0 *tdlib.AuthenticationCodeInfo
	if rf, ok := ret.Get(0).(func(string, *tdlib.PhoneNumberAuthenticationSettings) *tdlib.AuthenticationCodeInfo); ok {
		r0 = rf(phoneNumber, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.AuthenticationCodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *tdlib.PhoneNumberAuthenticationSettings) error); ok {
		r1 = rf(phoneNumber, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeStickerSet provides a mock function with given fields: setId, isInstalled, isArchived
func (_m *Mock) ChangeStickerSet(setId tdlib.JSONInt64, isInstalled bool, isArchived bool) (*tdlib.Ok, error) {
	ret := _m.Called(setId, isInstalled, isArchived)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64, bool, bool) *tdlib.Ok); ok {
		r0 = rf(setId, isInstalled, isArchived)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64, bool, bool) error); ok {
		r1 = rf(setId, isInstalled, isArchived)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckAuthenticationBotToken provides a mock function with given fields: token
func (_m *Mock) CheckAuthenticationBotToken(token string) (*tdlib.Ok, error) {
	ret := _m.Called(token)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckAuthenticationCode provides a mock function with given fields: code
func (_m *Mock) CheckAuthenticationCode(code string) (*tdlib.Ok, error) {
	ret := _m.Called(code)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckAuthenticationPassword provides a mock function with given fields: password
func (_m *Mock) CheckAuthenticationPassword(password string) (*tdlib.Ok, error) {
	ret := _m.Called(password)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChangePhoneNumberCode provides a mock function with given fields: code
func (_m *Mock) CheckChangePhoneNumberCode(code string) (*tdlib.Ok, error) {
	ret := _m.Called(code)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChatInviteLink provides a mock function with given fields: inviteLink
func (_m *Mock) CheckChatInviteLink(inviteLink string) (*tdlib.ChatInviteLinkInfo, error) {
	ret := _m.Called(inviteLink)

	var r0 *tdlib.ChatInviteLinkInfo
	if rf, ok := ret.Get(0).(func(string) *tdlib.ChatInviteLinkInfo); ok {
		r0 = rf(inviteLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ChatInviteLinkInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(inviteLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChatUsername provides a mock function with given fields: chatId, username
func (_m *Mock) CheckChatUsername(chatId int64, username string) (tdlib.CheckChatUsernameResult, error) {
	ret := _m.Called(chatId, username)

	var r0 tdlib.CheckChatUsernameResult
	if rf, ok := ret.Get(0).(func(int64, string) tdlib.CheckChatUsernameResult); ok {
		r0 = rf(chatId, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.CheckChatUsernameResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(chatId, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCreatedPublicChatsLimit provides a mock function with given fields: typeParam
func (_m *Mock) CheckCreatedPublicChatsLimit(typeParam tdlib.PublicChatType) (*tdlib.Ok, error) {
	ret := _m.Called(typeParam)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.PublicChatType) *tdlib.Ok); ok {
		r0 = rf(typeParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.PublicChatType) error); ok {
		r1 = rf(typeParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckDatabaseEncryptionKey provides a mock function with given fields: encryptionKey
func (_m *Mock) CheckDatabaseEncryptionKey(encryptionKey []byte) (*tdlib.Ok, error) {
	ret := _m.Called(encryptionKey)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func([]byte) *tdlib.Ok); ok {
		r0 = rf(encryptionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(encryptionKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckEmailAddressVerificationCode provides a mock function with given fields: code
func (_m *Mock) CheckEmailAddressVerificationCode(code string) (*tdlib.Ok, error) {
	ret := _m.Called(code)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPhoneNumberConfirmationCode provides a mock function with given fields: code
func (_m *Mock) CheckPhoneNumberConfirmationCode(code string) (*tdlib.Ok, error) {
	ret := _m.Called(code)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPhoneNumberVerificationCode provides a mock function with given fields: code
func (_m *Mock) CheckPhoneNumberVerificationCode(code string) (*tdlib.Ok, error) {
	ret := _m.Called(code)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckRecoveryEmailAddressCode provides a mock function with given fields: code
func (_m *Mock) CheckRecoveryEmailAddressCode(code string) (*tdlib.PasswordState, error) {
	ret := _m.Called(code)

	var r0 *tdlib.PasswordState
	if rf, ok := ret.Get(0).(func(string) *tdlib.PasswordState); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PasswordState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CleanFileName provides a mock function with given fields: fileName
func (_m *Mock) CleanFileName(fileName string) (*tdlib.Text, error) {
	ret := _m.Called(fileName)

	var r0 *tdlib.Text
	if rf, ok := ret.Get(0).(func(string) *tdlib.Text); ok {
		r0 = rf(fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Text)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearAllDraftMessages provides a mock function with given fields: excludeSecretChats
func (_m *Mock) ClearAllDraftMessages(excludeSecretChats bool) (*tdlib.Ok, error) {
	ret := _m.Called(excludeSecretChats)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(bool) *tdlib.Ok); ok {
		r0 = rf(excludeSecretChats)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(excludeSecretChats)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearImportedContacts provides a mock function with given fields:
func (_m *Mock) ClearImportedContacts() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearRecentStickers provides a mock function with given fields: isAttached
func (_m *Mock) ClearRecentStickers(isAttached bool) (*tdlib.Ok, error) {
	ret := _m.Called(isAttached)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(bool) *tdlib.Ok); ok {
		r0 = rf(isAttached)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(isAttached)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearRecentlyFoundChats provides a mock function with given fields:
func (_m *Mock) ClearRecentlyFoundChats() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *Mock) Close() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseChat provides a mock function with given fields: chatId
func (_m *Mock) CloseChat(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseSecretChat provides a mock function with given fields: secretChatId
func (_m *Mock) CloseSecretChat(secretChatId int32) (*tdlib.Ok, error) {
	ret := _m.Called(secretChatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(secretChatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(secretChatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmQrCodeAuthentication provides a mock function with given fields: link
func (_m *Mock) ConfirmQrCodeAuthentication(link string) (*tdlib.Session, error) {
	ret := _m.Called(link)

	var r0 *tdlib.Session
	if rf, ok := ret.Get(0).(func(string) *tdlib.Session); ok {
		r0 = rf(link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBasicGroupChat provides a mock function with given fields: basicGroupId, force
func (_m *Mock) CreateBasicGroupChat(basicGroupId int32, force bool) (*tdlib.Chat, error) {
	ret := _m.Called(basicGroupId, force)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(int32, bool) *tdlib.Chat); ok {
		r0 = rf(basicGroupId, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, bool) error); ok {
		r1 = rf(basicGroupId, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCall provides a mock function with given fields: userId, protocol
func (_m *Mock) CreateCall(userId int32, protocol *tdlib.CallProtocol) (*tdlib.CallId, error) {
	ret := _m.Called(userId, protocol)

	var r0 *tdlib.CallId
	if rf, ok := ret.Get(0).(func(int32, *tdlib.CallProtocol) *tdlib.CallId); ok {
		r0 = rf(userId, protocol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.CallId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, *tdlib.CallProtocol) error); ok {
		r1 = rf(userId, protocol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNewBasicGroupChat provides a mock function with given fields: userIds, title
func (_m *Mock) CreateNewBasicGroupChat(userIds []int32, title string) (*tdlib.Chat, error) {
	ret := _m.Called(userIds, title)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func([]int32, string) *tdlib.Chat); ok {
		r0 = rf(userIds, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int32, string) error); ok {
		r1 = rf(userIds, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNewSecretChat provides a mock function with given fields: userId
func (_m *Mock) CreateNewSecretChat(userId int32) (*tdlib.Chat, error) {
	ret := _m.Called(userId)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Chat); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNewStickerSet provides a mock function with given fields: userId, title, name, isMasks, stickers
func (_m *Mock) CreateNewStickerSet(userId int32, title string, name string, isMasks bool, stickers []tdlib.InputSticker) (*tdlib.StickerSet, error) {
	ret := _m.Called(userId, title, name, isMasks, stickers)

	var r0 *tdlib.StickerSet
	if rf, ok := ret.Get(0).(func(int32, string, string, bool, []tdlib.InputSticker) *tdlib.StickerSet); ok {
		r0 = rf(userId, title, name, isMasks, stickers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, string, string, bool, []tdlib.InputSticker) error); ok {
		r1 = rf(userId, title, name, isMasks, stickers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNewSupergroupChat provides a mock function with given fields: title, isChannel, description, location
func (_m *Mock) CreateNewSupergroupChat(title string, isChannel bool, description string, location *tdlib.ChatLocation) (*tdlib.Chat, error) {
	ret := _m.Called(title, isChannel, description, location)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(string, bool, string, *tdlib.ChatLocation) *tdlib.Chat); ok {
		r0 = rf(title, isChannel, description, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, string, *tdlib.ChatLocation) error); ok {
		r1 = rf(title, isChannel, description, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrivateChat provides a mock function with given fields: userId, force
func (_m *Mock) CreatePrivateChat(userId int32, force bool) (*tdlib.Chat, error) {
	ret := _m.Called(userId, force)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(int32, bool) *tdlib.Chat); ok {
		r0 = rf(userId, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, bool) error); ok {
		r1 = rf(userId, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecretChat provides a mock function with given fields: secretChatId
func (_m *Mock) CreateSecretChat(secretChatId int32) (*tdlib.Chat, error) {
	ret := _m.Called(secretChatId)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Chat); ok {
		r0 = rf(secretChatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(secretChatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSupergroupChat provides a mock function with given fields: supergroupId, force
func (_m *Mock) CreateSupergroupChat(supergroupId int32, force bool) (*tdlib.Chat, error) {
	ret := _m.Called(supergroupId, force)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(int32, bool) *tdlib.Chat); ok {
		r0 = rf(supergroupId, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, bool) error); ok {
		r1 = rf(supergroupId, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTemporaryPassword provides a mock function with given fields: password, validFor
func (_m *Mock) CreateTemporaryPassword(password string, validFor int32) (*tdlib.TemporaryPasswordState, error) {
	ret := _m.Called(password, validFor)

	var r0 *tdlib.TemporaryPasswordState
	if rf, ok := ret.Get(0).(func(string, int32) *tdlib.TemporaryPasswordState); ok {
		r0 = rf(password, validFor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TemporaryPasswordState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(password, validFor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: reason
func (_m *Mock) DeleteAccount(reason string) (*tdlib.Ok, error) {
	ret := _m.Called(reason)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(reason)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChatHistory provides a mock function with given fields: chatId, removeFromChatList, revoke
func (_m *Mock) DeleteChatHistory(chatId int64, removeFromChatList bool, revoke bool) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, removeFromChatList, revoke)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, bool, bool) *tdlib.Ok); ok {
		r0 = rf(chatId, removeFromChatList, revoke)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, bool, bool) error); ok {
		r1 = rf(chatId, removeFromChatList, revoke)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChatMessagesFromUser provides a mock function with given fields: chatId, userId
func (_m *Mock) DeleteChatMessagesFromUser(chatId int64, userId int32) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, userId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int32) *tdlib.Ok); ok {
		r0 = rf(chatId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32) error); ok {
		r1 = rf(chatId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChatReplyMarkup provides a mock function with given fields: chatId, messageId
func (_m *Mock) DeleteChatReplyMarkup(chatId int64, messageId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, messageId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int64) *tdlib.Ok); ok {
		r0 = rf(chatId, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFile provides a mock function with given fields: fileId
func (_m *Mock) DeleteFile(fileId int32) (*tdlib.Ok, error) {
	ret := _m.Called(fileId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLanguagePack provides a mock function with given fields: languagePackId
func (_m *Mock) DeleteLanguagePack(languagePackId string) (*tdlib.Ok, error) {
	ret := _m.Called(languagePackId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(languagePackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(languagePackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessages provides a mock function with given fields: chatId, messageIds, revoke
func (_m *Mock) DeleteMessages(chatId int64, messageIds []int64, revoke bool) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, messageIds, revoke)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, []int64, bool) *tdlib.Ok); ok {
		r0 = rf(chatId, messageIds, revoke)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, []int64, bool) error); ok {
		r1 = rf(chatId, messageIds, revoke)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePassportElement provides a mock function with given fields: typeParam
func (_m *Mock) DeletePassportElement(typeParam tdlib.PassportElementType) (*tdlib.Ok, error) {
	ret := _m.Called(typeParam)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.PassportElementType) *tdlib.Ok); ok {
		r0 = rf(typeParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.PassportElementType) error); ok {
		r1 = rf(typeParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfilePhoto provides a mock function with given fields: profilePhotoId
func (_m *Mock) DeleteProfilePhoto(profilePhotoId tdlib.JSONInt64) (*tdlib.Ok, error) {
	ret := _m.Called(profilePhotoId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64) *tdlib.Ok); ok {
		r0 = rf(profilePhotoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64) error); ok {
		r1 = rf(profilePhotoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSavedCredentials provides a mock function with given fields:
func (_m *Mock) DeleteSavedCredentials() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSavedOrderInfo provides a mock function with given fields:
func (_m *Mock) DeleteSavedOrderInfo() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSupergroup provides a mock function with given fields: supergroupId
func (_m *Mock) DeleteSupergroup(supergroupId int32) (*tdlib.Ok, error) {
	ret := _m.Called(supergroupId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(supergroupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(supergroupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destroy provides a mock function with given fields:
func (_m *Mock) Destroy() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DestroyInstance provides a mock function with given fields:
func (_m *Mock) DestroyInstance() {
	_m.Called()
}

// DisableProxy provides a mock function with given fields:
func (_m *Mock) DisableProxy() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscardCall provides a mock function with given fields: callId, isDisconnected, duration, connectionId
func (_m *Mock) DiscardCall(callId int32, isDisconnected bool, duration int32, connectionId tdlib.JSONInt64) (*tdlib.Ok, error) {
	ret := _m.Called(callId, isDisconnected, duration, connectionId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, bool, int32, tdlib.JSONInt64) *tdlib.Ok); ok {
		r0 = rf(callId, isDisconnected, duration, connectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, bool, int32, tdlib.JSONInt64) error); ok {
		r1 = rf(callId, isDisconnected, duration, connectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisconnectAllWebsites provides a mock function with given fields:
func (_m *Mock) DisconnectAllWebsites() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisconnectWebsite provides a mock function with given fields: websiteId
func (_m *Mock) DisconnectWebsite(websiteId tdlib.JSONInt64) (*tdlib.Ok, error) {
	ret := _m.Called(websiteId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64) *tdlib.Ok); ok {
		r0 = rf(websiteId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64) error); ok {
		r1 = rf(websiteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadFile provides a mock function with given fields: fileId, priority, offset, limit, synchronous
func (_m *Mock) DownloadFile(fileId int32, priority int32, offset int32, limit int32, synchronous bool) (*tdlib.File, error) {
	ret := _m.Called(fileId, priority, offset, limit, synchronous)

	var r0 *tdlib.File
	if rf, ok := ret.Get(0).(func(int32, int32, int32, int32, bool) *tdlib.File); ok {
		r0 = rf(fileId, priority, offset, limit, synchronous)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int32, int32, int32, bool) error); ok {
		r1 = rf(fileId, priority, offset, limit, synchronous)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditCustomLanguagePackInfo provides a mock function with given fields: info
func (_m *Mock) EditCustomLanguagePackInfo(info *tdlib.LanguagePackInfo) (*tdlib.Ok, error) {
	ret := _m.Called(info)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(*tdlib.LanguagePackInfo) *tdlib.Ok); ok {
		r0 = rf(info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.LanguagePackInfo) error); ok {
		r1 = rf(info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditInlineMessageCaption provides a mock function with given fields: inlineMessageId, replyMarkup, caption
func (_m *Mock) EditInlineMessageCaption(inlineMessageId string, replyMarkup tdlib.ReplyMarkup, caption *tdlib.FormattedText) (*tdlib.Ok, error) {
	ret := _m.Called(inlineMessageId, replyMarkup, caption)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, tdlib.ReplyMarkup, *tdlib.FormattedText) *tdlib.Ok); ok {
		r0 = rf(inlineMessageId, replyMarkup, caption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tdlib.ReplyMarkup, *tdlib.FormattedText) error); ok {
		r1 = rf(inlineMessageId, replyMarkup, caption)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditInlineMessageLiveLocation provides a mock function with given fields: inlineMessageId, replyMarkup, location
func (_m *Mock) EditInlineMessageLiveLocation(inlineMessageId string, replyMarkup tdlib.ReplyMarkup, location *tdlib.Location) (*tdlib.Ok, error) {
	ret := _m.Called(inlineMessageId, replyMarkup, location)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, tdlib.ReplyMarkup, *tdlib.Location) *tdlib.Ok); ok {
		r0 = rf(inlineMessageId, replyMarkup, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tdlib.ReplyMarkup, *tdlib.Location) error); ok {
		r1 = rf(inlineMessageId, replyMarkup, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditInlineMessageMedia provides a mock function with given fields: inlineMessageId, replyMarkup, inputMessageContent
func (_m *Mock) EditInlineMessageMedia(inlineMessageId string, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Ok, error) {
	ret := _m.Called(inlineMessageId, replyMarkup, inputMessageContent)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, tdlib.ReplyMarkup, tdlib.InputMessageContent) *tdlib.Ok); ok {
		r0 = rf(inlineMessageId, replyMarkup, inputMessageContent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tdlib.ReplyMarkup, tdlib.InputMessageContent) error); ok {
		r1 = rf(inlineMessageId, replyMarkup, inputMessageContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditInlineMessageReplyMarkup provides a mock function with given fields: inlineMessageId, replyMarkup
func (_m *Mock) EditInlineMessageReplyMarkup(inlineMessageId string, replyMarkup tdlib.ReplyMarkup) (*tdlib.Ok, error) {
	ret := _m.Called(inlineMessageId, replyMarkup)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, tdlib.ReplyMarkup) *tdlib.Ok); ok {
		r0 = rf(inlineMessageId, replyMarkup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tdlib.ReplyMarkup) error); ok {
		r1 = rf(inlineMessageId, replyMarkup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditInlineMessageText provides a mock function with given fields: inlineMessageId, replyMarkup, inputMessageContent
func (_m *Mock) EditInlineMessageText(inlineMessageId string, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Ok, error) {
	ret := _m.Called(inlineMessageId, replyMarkup, inputMessageContent)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, tdlib.ReplyMarkup, tdlib.InputMessageContent) *tdlib.Ok); ok {
		r0 = rf(inlineMessageId, replyMarkup, inputMessageContent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tdlib.ReplyMarkup, tdlib.InputMessageContent) error); ok {
		r1 = rf(inlineMessageId, replyMarkup, inputMessageContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditMessageCaption provides a mock function with given fields: chatId, messageId, replyMarkup, caption
func (_m *Mock) EditMessageCaption(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup, caption *tdlib.FormattedText) (*tdlib.Message, error) {
	ret := _m.Called(chatId, messageId, replyMarkup, caption)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64, tdlib.ReplyMarkup, *tdlib.FormattedText) *tdlib.Message); ok {
		r0 = rf(chatId, messageId, replyMarkup, caption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, tdlib.ReplyMarkup, *tdlib.FormattedText) error); ok {
		r1 = rf(chatId, messageId, replyMarkup, caption)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditMessageLiveLocation provides a mock function with given fields: chatId, messageId, replyMarkup, location
func (_m *Mock) EditMessageLiveLocation(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup, location *tdlib.Location) (*tdlib.Message, error) {
	ret := _m.Called(chatId, messageId, replyMarkup, location)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64, tdlib.ReplyMarkup, *tdlib.Location) *tdlib.Message); ok {
		r0 = rf(chatId, messageId, replyMarkup, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, tdlib.ReplyMarkup, *tdlib.Location) error); ok {
		r1 = rf(chatId, messageId, replyMarkup, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditMessageMedia provides a mock function with given fields: chatId, messageId, replyMarkup, inputMessageContent
func (_m *Mock) EditMessageMedia(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error) {
	ret := _m.Called(chatId, messageId, replyMarkup, inputMessageContent)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64, tdlib.ReplyMarkup, tdlib.InputMessageContent) *tdlib.Message); ok {
		r0 = rf(chatId, messageId, replyMarkup, inputMessageContent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, tdlib.ReplyMarkup, tdlib.InputMessageContent) error); ok {
		r1 = rf(chatId, messageId, replyMarkup, inputMessageContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditMessageReplyMarkup provides a mock function with given fields: chatId, messageId, replyMarkup
func (_m *Mock) EditMessageReplyMarkup(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup) (*tdlib.Message, error) {
	ret := _m.Called(chatId, messageId, replyMarkup)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64, tdlib.ReplyMarkup) *tdlib.Message); ok {
		r0 = rf(chatId, messageId, replyMarkup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, tdlib.ReplyMarkup) error); ok {
		r1 = rf(chatId, messageId, replyMarkup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditMessageSchedulingState provides a mock function with given fields: chatId, messageId, schedulingState
func (_m *Mock) EditMessageSchedulingState(chatId int64, messageId int64, schedulingState tdlib.MessageSchedulingState) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, messageId, schedulingState)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int64, tdlib.MessageSchedulingState) *tdlib.Ok); ok {
		r0 = rf(chatId, messageId, schedulingState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, tdlib.MessageSchedulingState) error); ok {
		r1 = rf(chatId, messageId, schedulingState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditMessageText provides a mock function with given fields: chatId, messageId, replyMarkup, inputMessageContent
func (_m *Mock) EditMessageText(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error) {
	ret := _m.Called(chatId, messageId, replyMarkup, inputMessageContent)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64, tdlib.ReplyMarkup, tdlib.InputMessageContent) *tdlib.Message); ok {
		r0 = rf(chatId, messageId, replyMarkup, inputMessageContent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, tdlib.ReplyMarkup, tdlib.InputMessageContent) error); ok {
		r1 = rf(chatId, messageId, replyMarkup, inputMessageContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditProxy provides a mock function with given fields: proxyId, server, port, enable, typeParam
func (_m *Mock) EditProxy(proxyId int32, server string, port int32, enable bool, typeParam tdlib.ProxyType) (*tdlib.Proxy, error) {
	ret := _m.Called(proxyId, server, port, enable, typeParam)

	var r0 *tdlib.Proxy
	if rf, ok := ret.Get(0).(func(int32, string, int32, bool, tdlib.ProxyType) *tdlib.Proxy); ok {
		r0 = rf(proxyId, server, port, enable, typeParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Proxy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, string, int32, bool, tdlib.ProxyType) error); ok {
		r1 = rf(proxyId, server, port, enable, typeParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableProxy provides a mock function with given fields: proxyId
func (_m *Mock) EnableProxy(proxyId int32) (*tdlib.Ok, error) {
	ret := _m.Called(proxyId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(proxyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(proxyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execute provides a mock function with given fields: jsonQuery
func (_m *Mock) Execute(jsonQuery interface{}) tdlib.UpdateMsg {
	ret := _m.Called(jsonQuery)

	var r0 tdlib.UpdateMsg
	if rf, ok := ret.Get(0).(func(interface{}) tdlib.UpdateMsg); ok {
		r0 = rf(jsonQuery)
	} else {
		r0 = ret.Get(0).(tdlib.UpdateMsg)
	}

	return r0
}

// FinishFileGeneration provides a mock function with given fields: generationId, error
func (_m *Mock) FinishFileGeneration(generationId tdlib.JSONInt64, err *tdlib.Error) (*tdlib.Ok, error) {
	ret := _m.Called(generationId, err)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64, *tdlib.Error) *tdlib.Ok); ok {
		r0 = rf(generationId, err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64, *tdlib.Error) error); ok {
		r1 = rf(generationId, err)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForwardMessages provides a mock function with given fields: chatId, fromChatId, messageIds, options, asAlbum, sendCopy, removeCaption
func (_m *Mock) ForwardMessages(chatId int64, fromChatId int64, messageIds []int64, options *tdlib.SendMessageOptions, asAlbum bool, sendCopy bool, removeCaption bool) (*tdlib.Messages, error) {
	ret := _m.Called(chatId, fromChatId, messageIds, options, asAlbum, sendCopy, removeCaption)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(int64, int64, []int64, *tdlib.SendMessageOptions, bool, bool, bool) *tdlib.Messages); ok {
		r0 = rf(chatId, fromChatId, messageIds, options, asAlbum, sendCopy, removeCaption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, []int64, *tdlib.SendMessageOptions, bool, bool, bool) error); ok {
		r1 = rf(chatId, fromChatId, messageIds, options, asAlbum, sendCopy, removeCaption)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateChatInviteLink provides a mock function with given fields: chatId
func (_m *Mock) GenerateChatInviteLink(chatId int64) (*tdlib.ChatInviteLink, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.ChatInviteLink
	if rf, ok := ret.Get(0).(func(int64) *tdlib.ChatInviteLink); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ChatInviteLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountTtl provides a mock function with given fields:
func (_m *Mock) GetAccountTtl() (*tdlib.AccountTtl, error) {
	ret := _m.Called()

	var r0 *tdlib.AccountTtl
	if rf, ok := ret.Get(0).(func() *tdlib.AccountTtl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.AccountTtl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveLiveLocationMessages provides a mock function with given fields:
func (_m *Mock) GetActiveLiveLocationMessages() (*tdlib.Messages, error) {
	ret := _m.Called()

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func() *tdlib.Messages); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveSessions provides a mock function with given fields:
func (_m *Mock) GetActiveSessions() (*tdlib.Sessions, error) {
	ret := _m.Called()

	var r0 *tdlib.Sessions
	if rf, ok := ret.Get(0).(func() *tdlib.Sessions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Sessions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPassportElements provides a mock function with given fields: password
func (_m *Mock) GetAllPassportElements(password string) (*tdlib.PassportElements, error) {
	ret := _m.Called(password)

	var r0 *tdlib.PassportElements
	if rf, ok := ret.Get(0).(func(string) *tdlib.PassportElements); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PassportElements)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationConfig provides a mock function with given fields:
func (_m *Mock) GetApplicationConfig() (tdlib.JsonValue, error) {
	ret := _m.Called()

	var r0 tdlib.JsonValue
	if rf, ok := ret.Get(0).(func() tdlib.JsonValue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.JsonValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchivedStickerSets provides a mock function with given fields: isMasks, offsetStickerSetId, limit
func (_m *Mock) GetArchivedStickerSets(isMasks bool, offsetStickerSetId tdlib.JSONInt64, limit int32) (*tdlib.StickerSets, error) {
	ret := _m.Called(isMasks, offsetStickerSetId, limit)

	var r0 *tdlib.StickerSets
	if rf, ok := ret.Get(0).(func(bool, tdlib.JSONInt64, int32) *tdlib.StickerSets); ok {
		r0 = rf(isMasks, offsetStickerSetId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, tdlib.JSONInt64, int32) error); ok {
		r1 = rf(isMasks, offsetStickerSetId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttachedStickerSets provides a mock function with given fields: fileId
func (_m *Mock) GetAttachedStickerSets(fileId int32) (*tdlib.StickerSets, error) {
	ret := _m.Called(fileId)

	var r0 *tdlib.StickerSets
	if rf, ok := ret.Get(0).(func(int32) *tdlib.StickerSets); ok {
		r0 = rf(fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizationState provides a mock function with given fields:
func (_m *Mock) GetAuthorizationState() (tdlib.AuthorizationState, error) {
	ret := _m.Called()

	var r0 tdlib.AuthorizationState
	if rf, ok := ret.Get(0).(func() tdlib.AuthorizationState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.AuthorizationState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAutoDownloadSettingsPresets provides a mock function with given fields:
func (_m *Mock) GetAutoDownloadSettingsPresets() (*tdlib.AutoDownloadSettingsPresets, error) {
	ret := _m.Called()

	var r0 *tdlib.AutoDownloadSettingsPresets
	if rf, ok := ret.Get(0).(func() *tdlib.AutoDownloadSettingsPresets); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.AutoDownloadSettingsPresets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackgroundUrl provides a mock function with given fields: name, typeParam
func (_m *Mock) GetBackgroundUrl(name string, typeParam tdlib.BackgroundType) (*tdlib.HttpUrl, error) {
	ret := _m.Called(name, typeParam)

	var r0 *tdlib.HttpUrl
	if rf, ok := ret.Get(0).(func(string, tdlib.BackgroundType) *tdlib.HttpUrl); ok {
		r0 = rf(name, typeParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.HttpUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tdlib.BackgroundType) error); ok {
		r1 = rf(name, typeParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackgrounds provides a mock function with given fields: forDarkTheme
func (_m *Mock) GetBackgrounds(forDarkTheme bool) (*tdlib.Backgrounds, error) {
	ret := _m.Called(forDarkTheme)

	var r0 *tdlib.Backgrounds
	if rf, ok := ret.Get(0).(func(bool) *tdlib.Backgrounds); ok {
		r0 = rf(forDarkTheme)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Backgrounds)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(forDarkTheme)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasicGroup provides a mock function with given fields: basicGroupId
func (_m *Mock) GetBasicGroup(basicGroupId int32) (*tdlib.BasicGroup, error) {
	ret := _m.Called(basicGroupId)

	var r0 *tdlib.BasicGroup
	if rf, ok := ret.Get(0).(func(int32) *tdlib.BasicGroup); ok {
		r0 = rf(basicGroupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.BasicGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(basicGroupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasicGroupFullInfo provides a mock function with given fields: basicGroupId
func (_m *Mock) GetBasicGroupFullInfo(basicGroupId int32) (*tdlib.BasicGroupFullInfo, error) {
	ret := _m.Called(basicGroupId)

	var r0 *tdlib.BasicGroupFullInfo
	if rf, ok := ret.Get(0).(func(int32) *tdlib.BasicGroupFullInfo); ok {
		r0 = rf(basicGroupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.BasicGroupFullInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(basicGroupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockedUsers provides a mock function with given fields: offset, limit
func (_m *Mock) GetBlockedUsers(offset int32, limit int32) (*tdlib.Users, error) {
	ret := _m.Called(offset, limit)

	var r0 *tdlib.Users
	if rf, ok := ret.Get(0).(func(int32, int32) *tdlib.Users); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int32) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCallbackQueryAnswer provides a mock function with given fields: chatId, messageId, payload
func (_m *Mock) GetCallbackQueryAnswer(chatId int64, messageId int64, payload tdlib.CallbackQueryPayload) (*tdlib.CallbackQueryAnswer, error) {
	ret := _m.Called(chatId, messageId, payload)

	var r0 *tdlib.CallbackQueryAnswer
	if rf, ok := ret.Get(0).(func(int64, int64, tdlib.CallbackQueryPayload) *tdlib.CallbackQueryAnswer); ok {
		r0 = rf(chatId, messageId, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.CallbackQueryAnswer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, tdlib.CallbackQueryPayload) error); ok {
		r1 = rf(chatId, messageId, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChat provides a mock function with given fields: chatId
func (_m *Mock) GetChat(chatId int64) (*tdlib.Chat, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Chat); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatAdministrators provides a mock function with given fields: chatId
func (_m *Mock) GetChatAdministrators(chatId int64) (*tdlib.ChatAdministrators, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.ChatAdministrators
	if rf, ok := ret.Get(0).(func(int64) *tdlib.ChatAdministrators); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ChatAdministrators)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatEventLog provides a mock function with given fields: chatId, query, fromEventId, limit, filters, userIds
func (_m *Mock) GetChatEventLog(chatId int64, query string, fromEventId tdlib.JSONInt64, limit int32, filters *tdlib.ChatEventLogFilters, userIds []int32) (*tdlib.ChatEvents, error) {
	ret := _m.Called(chatId, query, fromEventId, limit, filters, userIds)

	var r0 *tdlib.ChatEvents
	if rf, ok := ret.Get(0).(func(int64, string, tdlib.JSONInt64, int32, *tdlib.ChatEventLogFilters, []int32) *tdlib.ChatEvents); ok {
		r0 = rf(chatId, query, fromEventId, limit, filters, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ChatEvents)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string, tdlib.JSONInt64, int32, *tdlib.ChatEventLogFilters, []int32) error); ok {
		r1 = rf(chatId, query, fromEventId, limit, filters, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatHistory provides a mock function with given fields: chatId, fromMessageId, offset, limit, onlyLocal
func (_m *Mock) GetChatHistory(chatId int64, fromMessageId int64, offset int32, limit int32, onlyLocal bool) (*tdlib.Messages, error) {
	ret := _m.Called(chatId, fromMessageId, offset, limit, onlyLocal)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(int64, int64, int32, int32, bool) *tdlib.Messages); ok {
		r0 = rf(chatId, fromMessageId, offset, limit, onlyLocal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int32, int32, bool) error); ok {
		r1 = rf(chatId, fromMessageId, offset, limit, onlyLocal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatMember provides a mock function with given fields: chatId, userId
func (_m *Mock) GetChatMember(chatId int64, userId int32) (*tdlib.ChatMember, error) {
	ret := _m.Called(chatId, userId)

	var r0 *tdlib.ChatMember
	if rf, ok := ret.Get(0).(func(int64, int32) *tdlib.ChatMember); ok {
		r0 = rf(chatId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ChatMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32) error); ok {
		r1 = rf(chatId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatMessageByDate provides a mock function with given fields: chatId, date
func (_m *Mock) GetChatMessageByDate(chatId int64, date int32) (*tdlib.Message, error) {
	ret := _m.Called(chatId, date)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int32) *tdlib.Message); ok {
		r0 = rf(chatId, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32) error); ok {
		r1 = rf(chatId, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatMessageCount provides a mock function with given fields: chatId, filter, returnLocal
func (_m *Mock) GetChatMessageCount(chatId int64, filter tdlib.SearchMessagesFilter, returnLocal bool) (*tdlib.Count, error) {
	ret := _m.Called(chatId, filter, returnLocal)

	var r0 *tdlib.Count
	if rf, ok := ret.Get(0).(func(int64, tdlib.SearchMessagesFilter, bool) *tdlib.Count); ok {
		r0 = rf(chatId, filter, returnLocal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Count)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, tdlib.SearchMessagesFilter, bool) error); ok {
		r1 = rf(chatId, filter, returnLocal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatNotificationSettingsExceptions provides a mock function with given fields: scope, compareSound
func (_m *Mock) GetChatNotificationSettingsExceptions(scope tdlib.NotificationSettingsScope, compareSound bool) (*tdlib.Chats, error) {
	ret := _m.Called(scope, compareSound)

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func(tdlib.NotificationSettingsScope, bool) *tdlib.Chats); ok {
		r0 = rf(scope, compareSound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.NotificationSettingsScope, bool) error); ok {
		r1 = rf(scope, compareSound)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatPinnedMessage provides a mock function with given fields: chatId
func (_m *Mock) GetChatPinnedMessage(chatId int64) (*tdlib.Message, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Message); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatScheduledMessages provides a mock function with given fields: chatId
func (_m *Mock) GetChatScheduledMessages(chatId int64) (*tdlib.Messages, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Messages); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatStatisticsUrl provides a mock function with given fields: chatId, parameters, isDark
func (_m *Mock) GetChatStatisticsUrl(chatId int64, parameters string, isDark bool) (*tdlib.HttpUrl, error) {
	ret := _m.Called(chatId, parameters, isDark)

	var r0 *tdlib.HttpUrl
	if rf, ok := ret.Get(0).(func(int64, string, bool) *tdlib.HttpUrl); ok {
		r0 = rf(chatId, parameters, isDark)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.HttpUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string, bool) error); ok {
		r1 = rf(chatId, parameters, isDark)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChats provides a mock function with given fields: chatList, offsetOrder, offsetChatId, limit
func (_m *Mock) GetChats(chatList tdlib.ChatList, offsetOrder tdlib.JSONInt64, offsetChatId int64, limit int32) (*tdlib.Chats, error) {
	ret := _m.Called(chatList, offsetOrder, offsetChatId, limit)

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func(tdlib.ChatList, tdlib.JSONInt64, int64, int32) *tdlib.Chats); ok {
		r0 = rf(chatList, offsetOrder, offsetChatId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.ChatList, tdlib.JSONInt64, int64, int32) error); ok {
		r1 = rf(chatList, offsetOrder, offsetChatId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectedWebsites provides a mock function with given fields:
func (_m *Mock) GetConnectedWebsites() (*tdlib.ConnectedWebsites, error) {
	ret := _m.Called()

	var r0 *tdlib.ConnectedWebsites
	if rf, ok := ret.Get(0).(func() *tdlib.ConnectedWebsites); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ConnectedWebsites)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContacts provides a mock function with given fields:
func (_m *Mock) GetContacts() (*tdlib.Users, error) {
	ret := _m.Called()

	var r0 *tdlib.Users
	if rf, ok := ret.Get(0).(func() *tdlib.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountryCode provides a mock function with given fields:
func (_m *Mock) GetCountryCode() (*tdlib.Text, error) {
	ret := _m.Called()

	var r0 *tdlib.Text
	if rf, ok := ret.Get(0).(func() *tdlib.Text); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Text)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreatedPublicChats provides a mock function with given fields: typeParam
func (_m *Mock) GetCreatedPublicChats(typeParam tdlib.PublicChatType) (*tdlib.Chats, error) {
	ret := _m.Called(typeParam)

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func(tdlib.PublicChatType) *tdlib.Chats); ok {
		r0 = rf(typeParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.PublicChatType) error); ok {
		r1 = rf(typeParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentState provides a mock function with given fields:
func (_m *Mock) GetCurrentState() (*tdlib.Updates, error) {
	ret := _m.Called()

	var r0 *tdlib.Updates
	if rf, ok := ret.Get(0).(func() *tdlib.Updates); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Updates)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseStatistics provides a mock function with given fields:
func (_m *Mock) GetDatabaseStatistics() (*tdlib.DatabaseStatistics, error) {
	ret := _m.Called()

	var r0 *tdlib.DatabaseStatistics
	if rf, ok := ret.Get(0).(func() *tdlib.DatabaseStatistics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.DatabaseStatistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeepLinkInfo provides a mock function with given fields: link
func (_m *Mock) GetDeepLinkInfo(link string) (*tdlib.DeepLinkInfo, error) {
	ret := _m.Called(link)

	var r0 *tdlib.DeepLinkInfo
	if rf, ok := ret.Get(0).(func(string) *tdlib.DeepLinkInfo); ok {
		r0 = rf(link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.DeepLinkInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmojiSuggestionsUrl provides a mock function with given fields: languageCode
func (_m *Mock) GetEmojiSuggestionsUrl(languageCode string) (*tdlib.HttpUrl, error) {
	ret := _m.Called(languageCode)

	var r0 *tdlib.HttpUrl
	if rf, ok := ret.Get(0).(func(string) *tdlib.HttpUrl); ok {
		r0 = rf(languageCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.HttpUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(languageCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavoriteStickers provides a mock function with given fields:
func (_m *Mock) GetFavoriteStickers() (*tdlib.Stickers, error) {
	ret := _m.Called()

	var r0 *tdlib.Stickers
	if rf, ok := ret.Get(0).(func() *tdlib.Stickers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Stickers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFile provides a mock function with given fields: fileId
func (_m *Mock) GetFile(fileId int32) (*tdlib.File, error) {
	ret := _m.Called(fileId)

	var r0 *tdlib.File
	if rf, ok := ret.Get(0).(func(int32) *tdlib.File); ok {
		r0 = rf(fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileDownloadedPrefixSize provides a mock function with given fields: fileId, offset
func (_m *Mock) GetFileDownloadedPrefixSize(fileId int32, offset int32) (*tdlib.Count, error) {
	ret := _m.Called(fileId, offset)

	var r0 *tdlib.Count
	if rf, ok := ret.Get(0).(func(int32, int32) *tdlib.Count); ok {
		r0 = rf(fileId, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Count)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int32) error); ok {
		r1 = rf(fileId, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileExtension provides a mock function with given fields: mimeType
func (_m *Mock) GetFileExtension(mimeType string) (*tdlib.Text, error) {
	ret := _m.Called(mimeType)

	var r0 *tdlib.Text
	if rf, ok := ret.Get(0).(func(string) *tdlib.Text); ok {
		r0 = rf(mimeType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Text)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mimeType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileMimeType provides a mock function with given fields: fileName
func (_m *Mock) GetFileMimeType(fileName string) (*tdlib.Text, error) {
	ret := _m.Called(fileName)

	var r0 *tdlib.Text
	if rf, ok := ret.Get(0).(func(string) *tdlib.Text); ok {
		r0 = rf(fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Text)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameHighScores provides a mock function with given fields: chatId, messageId, userId
func (_m *Mock) GetGameHighScores(chatId int64, messageId int64, userId int32) (*tdlib.GameHighScores, error) {
	ret := _m.Called(chatId, messageId, userId)

	var r0 *tdlib.GameHighScores
	if rf, ok := ret.Get(0).(func(int64, int64, int32) *tdlib.GameHighScores); ok {
		r0 = rf(chatId, messageId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.GameHighScores)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int32) error); ok {
		r1 = rf(chatId, messageId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsInCommon provides a mock function with given fields: userId, offsetChatId, limit
func (_m *Mock) GetGroupsInCommon(userId int32, offsetChatId int64, limit int32) (*tdlib.Chats, error) {
	ret := _m.Called(userId, offsetChatId, limit)

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func(int32, int64, int32) *tdlib.Chats); ok {
		r0 = rf(userId, offsetChatId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int64, int32) error); ok {
		r1 = rf(userId, offsetChatId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportedContactCount provides a mock function with given fields:
func (_m *Mock) GetImportedContactCount() (*tdlib.Count, error) {
	ret := _m.Called()

	var r0 *tdlib.Count
	if rf, ok := ret.Get(0).(func() *tdlib.Count); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Count)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInactiveSupergroupChats provides a mock function with given fields:
func (_m *Mock) GetInactiveSupergroupChats() (*tdlib.Chats, error) {
	ret := _m.Called()

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func() *tdlib.Chats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInlineGameHighScores provides a mock function with given fields: inlineMessageId, userId
func (_m *Mock) GetInlineGameHighScores(inlineMessageId string, userId int32) (*tdlib.GameHighScores, error) {
	ret := _m.Called(inlineMessageId, userId)

	var r0 *tdlib.GameHighScores
	if rf, ok := ret.Get(0).(func(string, int32) *tdlib.GameHighScores); ok {
		r0 = rf(inlineMessageId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.GameHighScores)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(inlineMessageId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInlineQueryResults provides a mock function with given fields: botUserId, chatId, userLocation, query, offset
func (_m *Mock) GetInlineQueryResults(botUserId int32, chatId int64, userLocation *tdlib.Location, query string, offset string) (*tdlib.InlineQueryResults, error) {
	ret := _m.Called(botUserId, chatId, userLocation, query, offset)

	var r0 *tdlib.InlineQueryResults
	if rf, ok := ret.Get(0).(func(int32, int64, *tdlib.Location, string, string) *tdlib.InlineQueryResults); ok {
		r0 = rf(botUserId, chatId, userLocation, query, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.InlineQueryResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int64, *tdlib.Location, string, string) error); ok {
		r1 = rf(botUserId, chatId, userLocation, query, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstalledStickerSets provides a mock function with given fields: isMasks
func (_m *Mock) GetInstalledStickerSets(isMasks bool) (*tdlib.StickerSets, error) {
	ret := _m.Called(isMasks)

	var r0 *tdlib.StickerSets
	if rf, ok := ret.Get(0).(func(bool) *tdlib.StickerSets); ok {
		r0 = rf(isMasks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(isMasks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInviteText provides a mock function with given fields:
func (_m *Mock) GetInviteText() (*tdlib.Text, error) {
	ret := _m.Called()

	var r0 *tdlib.Text
	if rf, ok := ret.Get(0).(func() *tdlib.Text); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Text)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJsonString provides a mock function with given fields: jsonValue
func (_m *Mock) GetJsonString(jsonValue tdlib.JsonValue) (*tdlib.Text, error) {
	ret := _m.Called(jsonValue)

	var r0 *tdlib.Text
	if rf, ok := ret.Get(0).(func(tdlib.JsonValue) *tdlib.Text); ok {
		r0 = rf(jsonValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Text)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JsonValue) error); ok {
		r1 = rf(jsonValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJsonValue provides a mock function with given fields: jValue
func (_m *Mock) GetJsonValue(jValue string) (tdlib.JsonValue, error) {
	ret := _m.Called(jValue)

	var r0 tdlib.JsonValue
	if rf, ok := ret.Get(0).(func(string) tdlib.JsonValue); ok {
		r0 = rf(jValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.JsonValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLanguagePackInfo provides a mock function with given fields: languagePackId
func (_m *Mock) GetLanguagePackInfo(languagePackId string) (*tdlib.LanguagePackInfo, error) {
	ret := _m.Called(languagePackId)

	var r0 *tdlib.LanguagePackInfo
	if rf, ok := ret.Get(0).(func(string) *tdlib.LanguagePackInfo); ok {
		r0 = rf(languagePackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.LanguagePackInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(languagePackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLanguagePackString provides a mock function with given fields: languagePackDatabasePath, localizationTarget, languagePackId, key
func (_m *Mock) GetLanguagePackString(languagePackDatabasePath string, localizationTarget string, languagePackId string, key string) (tdlib.LanguagePackStringValue, error) {
	ret := _m.Called(languagePackDatabasePath, localizationTarget, languagePackId, key)

	var r0 tdlib.LanguagePackStringValue
	if rf, ok := ret.Get(0).(func(string, string, string, string) tdlib.LanguagePackStringValue); ok {
		r0 = rf(languagePackDatabasePath, localizationTarget, languagePackId, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.LanguagePackStringValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(languagePackDatabasePath, localizationTarget, languagePackId, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLanguagePackStrings provides a mock function with given fields: languagePackId, keys
func (_m *Mock) GetLanguagePackStrings(languagePackId string, keys []string) (*tdlib.LanguagePackStrings, error) {
	ret := _m.Called(languagePackId, keys)

	var r0 *tdlib.LanguagePackStrings
	if rf, ok := ret.Get(0).(func(string, []string) *tdlib.LanguagePackStrings); ok {
		r0 = rf(languagePackId, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.LanguagePackStrings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(languagePackId, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocalizationTargetInfo provides a mock function with given fields: onlyLocal
func (_m *Mock) GetLocalizationTargetInfo(onlyLocal bool) (*tdlib.LocalizationTargetInfo, error) {
	ret := _m.Called(onlyLocal)

	var r0 *tdlib.LocalizationTargetInfo
	if rf, ok := ret.Get(0).(func(bool) *tdlib.LocalizationTargetInfo); ok {
		r0 = rf(onlyLocal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.LocalizationTargetInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(onlyLocal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogStream provides a mock function with given fields:
func (_m *Mock) GetLogStream() (tdlib.LogStream, error) {
	ret := _m.Called()

	var r0 tdlib.LogStream
	if rf, ok := ret.Get(0).(func() tdlib.LogStream); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.LogStream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogTagVerbosityLevel provides a mock function with given fields: tag
func (_m *Mock) GetLogTagVerbosityLevel(tag string) (*tdlib.LogVerbosityLevel, error) {
	ret := _m.Called(tag)

	var r0 *tdlib.LogVerbosityLevel
	if rf, ok := ret.Get(0).(func(string) *tdlib.LogVerbosityLevel); ok {
		r0 = rf(tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.LogVerbosityLevel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogTags provides a mock function with given fields:
func (_m *Mock) GetLogTags() (*tdlib.LogTags, error) {
	ret := _m.Called()

	var r0 *tdlib.LogTags
	if rf, ok := ret.Get(0).(func() *tdlib.LogTags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.LogTags)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogVerbosityLevel provides a mock function with given fields:
func (_m *Mock) GetLogVerbosityLevel() (*tdlib.LogVerbosityLevel, error) {
	ret := _m.Called()

	var r0 *tdlib.LogVerbosityLevel
	if rf, ok := ret.Get(0).(func() *tdlib.LogVerbosityLevel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.LogVerbosityLevel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoginUrl provides a mock function with given fields: chatId, messageId, buttonId, allowWriteAccess
func (_m *Mock) GetLoginUrl(chatId int64, messageId int64, buttonId int32, allowWriteAccess bool) (*tdlib.HttpUrl, error) {
	ret := _m.Called(chatId, messageId, buttonId, allowWriteAccess)

	var r0 *tdlib.HttpUrl
	if rf, ok := ret.Get(0).(func(int64, int64, int32, bool) *tdlib.HttpUrl); ok {
		r0 = rf(chatId, messageId, buttonId, allowWriteAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.HttpUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int32, bool) error); ok {
		r1 = rf(chatId, messageId, buttonId, allowWriteAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoginUrlInfo provides a mock function with given fields: chatId, messageId, buttonId
func (_m *Mock) GetLoginUrlInfo(chatId int64, messageId int64, buttonId int32) (tdlib.LoginUrlInfo, error) {
	ret := _m.Called(chatId, messageId, buttonId)

	var r0 tdlib.LoginUrlInfo
	if rf, ok := ret.Get(0).(func(int64, int64, int32) tdlib.LoginUrlInfo); ok {
		r0 = rf(chatId, messageId, buttonId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.LoginUrlInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int32) error); ok {
		r1 = rf(chatId, messageId, buttonId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMapThumbnailFile provides a mock function with given fields: location, zoom, width, height, scale, chatId
func (_m *Mock) GetMapThumbnailFile(location *tdlib.Location, zoom int32, width int32, height int32, scale int32, chatId int64) (*tdlib.File, error) {
	ret := _m.Called(location, zoom, width, height, scale, chatId)

	var r0 *tdlib.File
	if rf, ok := ret.Get(0).(func(*tdlib.Location, int32, int32, int32, int32, int64) *tdlib.File); ok {
		r0 = rf(location, zoom, width, height, scale, chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.Location, int32, int32, int32, int32, int64) error); ok {
		r1 = rf(location, zoom, width, height, scale, chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMe provides a mock function with given fields:
func (_m *Mock) GetMe() (*tdlib.User, error) {
	ret := _m.Called()

	var r0 *tdlib.User
	if rf, ok := ret.Get(0).(func() *tdlib.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessage provides a mock function with given fields: chatId, messageId
func (_m *Mock) GetMessage(chatId int64, messageId int64) (*tdlib.Message, error) {
	ret := _m.Called(chatId, messageId)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64) *tdlib.Message); ok {
		r0 = rf(chatId, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageLink provides a mock function with given fields: chatId, messageId
func (_m *Mock) GetMessageLink(chatId int64, messageId int64) (*tdlib.HttpUrl, error) {
	ret := _m.Called(chatId, messageId)

	var r0 *tdlib.HttpUrl
	if rf, ok := ret.Get(0).(func(int64, int64) *tdlib.HttpUrl); ok {
		r0 = rf(chatId, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.HttpUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageLinkInfo provides a mock function with given fields: url
func (_m *Mock) GetMessageLinkInfo(url string) (*tdlib.MessageLinkInfo, error) {
	ret := _m.Called(url)

	var r0 *tdlib.MessageLinkInfo
	if rf, ok := ret.Get(0).(func(string) *tdlib.MessageLinkInfo); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.MessageLinkInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageLocally provides a mock function with given fields: chatId, messageId
func (_m *Mock) GetMessageLocally(chatId int64, messageId int64) (*tdlib.Message, error) {
	ret := _m.Called(chatId, messageId)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64) *tdlib.Message); ok {
		r0 = rf(chatId, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: chatId, messageIds
func (_m *Mock) GetMessages(chatId int64, messageIds []int64) (*tdlib.Messages, error) {
	ret := _m.Called(chatId, messageIds)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(int64, []int64) *tdlib.Messages); ok {
		r0 = rf(chatId, messageIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, []int64) error); ok {
		r1 = rf(chatId, messageIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkStatistics provides a mock function with given fields: onlyCurrent
func (_m *Mock) GetNetworkStatistics(onlyCurrent bool) (*tdlib.NetworkStatistics, error) {
	ret := _m.Called(onlyCurrent)

	var r0 *tdlib.NetworkStatistics
	if rf, ok := ret.Get(0).(func(bool) *tdlib.NetworkStatistics); ok {
		r0 = rf(onlyCurrent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.NetworkStatistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(onlyCurrent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOption provides a mock function with given fields: name
func (_m *Mock) GetOption(name string) (tdlib.OptionValue, error) {
	ret := _m.Called(name)

	var r0 tdlib.OptionValue
	if rf, ok := ret.Get(0).(func(string) tdlib.OptionValue); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.OptionValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPassportAuthorizationForm provides a mock function with given fields: botUserId, scope, publicKey, nonce
func (_m *Mock) GetPassportAuthorizationForm(botUserId int32, scope string, publicKey string, nonce string) (*tdlib.PassportAuthorizationForm, error) {
	ret := _m.Called(botUserId, scope, publicKey, nonce)

	var r0 *tdlib.PassportAuthorizationForm
	if rf, ok := ret.Get(0).(func(int32, string, string, string) *tdlib.PassportAuthorizationForm); ok {
		r0 = rf(botUserId, scope, publicKey, nonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PassportAuthorizationForm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, string, string, string) error); ok {
		r1 = rf(botUserId, scope, publicKey, nonce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPassportAuthorizationFormAvailableElements provides a mock function with given fields: autorizationFormId, password
func (_m *Mock) GetPassportAuthorizationFormAvailableElements(autorizationFormId int32, password string) (*tdlib.PassportElementsWithErrors, error) {
	ret := _m.Called(autorizationFormId, password)

	var r0 *tdlib.PassportElementsWithErrors
	if rf, ok := ret.Get(0).(func(int32, string) *tdlib.PassportElementsWithErrors); ok {
		r0 = rf(autorizationFormId, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PassportElementsWithErrors)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, string) error); ok {
		r1 = rf(autorizationFormId, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPassportElement provides a mock function with given fields: typeParam, password
func (_m *Mock) GetPassportElement(typeParam tdlib.PassportElementType, password string) (tdlib.PassportElement, error) {
	ret := _m.Called(typeParam, password)

	var r0 tdlib.PassportElement
	if rf, ok := ret.Get(0).(func(tdlib.PassportElementType, string) tdlib.PassportElement); ok {
		r0 = rf(typeParam, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.PassportElement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.PassportElementType, string) error); ok {
		r1 = rf(typeParam, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordState provides a mock function with given fields:
func (_m *Mock) GetPasswordState() (*tdlib.PasswordState, error) {
	ret := _m.Called()

	var r0 *tdlib.PasswordState
	if rf, ok := ret.Get(0).(func() *tdlib.PasswordState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PasswordState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentForm provides a mock function with given fields: chatId, messageId
func (_m *Mock) GetPaymentForm(chatId int64, messageId int64) (*tdlib.PaymentForm, error) {
	ret := _m.Called(chatId, messageId)

	var r0 *tdlib.PaymentForm
	if rf, ok := ret.Get(0).(func(int64, int64) *tdlib.PaymentForm); ok {
		r0 = rf(chatId, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PaymentForm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentReceipt provides a mock function with given fields: chatId, messageId
func (_m *Mock) GetPaymentReceipt(chatId int64, messageId int64) (*tdlib.PaymentReceipt, error) {
	ret := _m.Called(chatId, messageId)

	var r0 *tdlib.PaymentReceipt
	if rf, ok := ret.Get(0).(func(int64, int64) *tdlib.PaymentReceipt); ok {
		r0 = rf(chatId, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PaymentReceipt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPollVoters provides a mock function with given fields: chatId, messageId, optionId, offset, limit
func (_m *Mock) GetPollVoters(chatId int64, messageId int64, optionId int32, offset int32, limit int32) (*tdlib.Users, error) {
	ret := _m.Called(chatId, messageId, optionId, offset, limit)

	var r0 *tdlib.Users
	if rf, ok := ret.Get(0).(func(int64, int64, int32, int32, int32) *tdlib.Users); ok {
		r0 = rf(chatId, messageId, optionId, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int32, int32, int32) error); ok {
		r1 = rf(chatId, messageId, optionId, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreferredCountryLanguage provides a mock function with given fields: countryCode
func (_m *Mock) GetPreferredCountryLanguage(countryCode string) (*tdlib.Text, error) {
	ret := _m.Called(countryCode)

	var r0 *tdlib.Text
	if rf, ok := ret.Get(0).(func(string) *tdlib.Text); ok {
		r0 = rf(countryCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Text)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(countryCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProxies provides a mock function with given fields:
func (_m *Mock) GetProxies() (*tdlib.Proxies, error) {
	ret := _m.Called()

	var r0 *tdlib.Proxies
	if rf, ok := ret.Get(0).(func() *tdlib.Proxies); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Proxies)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProxyLink provides a mock function with given fields: proxyId
func (_m *Mock) GetProxyLink(proxyId int32) (*tdlib.Text, error) {
	ret := _m.Called(proxyId)

	var r0 *tdlib.Text
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Text); ok {
		r0 = rf(proxyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Text)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(proxyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicMessageLink provides a mock function with given fields: chatId, messageId, forAlbum
func (_m *Mock) GetPublicMessageLink(chatId int64, messageId int64, forAlbum bool) (*tdlib.PublicMessageLink, error) {
	ret := _m.Called(chatId, messageId, forAlbum)

	var r0 *tdlib.PublicMessageLink
	if rf, ok := ret.Get(0).(func(int64, int64, bool) *tdlib.PublicMessageLink); ok {
		r0 = rf(chatId, messageId, forAlbum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PublicMessageLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, bool) error); ok {
		r1 = rf(chatId, messageId, forAlbum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPushReceiverId provides a mock function with given fields: payload
func (_m *Mock) GetPushReceiverId(payload string) (*tdlib.PushReceiverId, error) {
	ret := _m.Called(payload)

	var r0 *tdlib.PushReceiverId
	if rf, ok := ret.Get(0).(func(string) *tdlib.PushReceiverId); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PushReceiverId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRawUpdatesChannel provides a mock function with given fields: capacity
func (_m *Mock) GetRawUpdatesChannel(capacity int) chan tdlib.UpdateMsg {
	ret := _m.Called(capacity)

	var r0 chan tdlib.UpdateMsg
	if rf, ok := ret.Get(0).(func(int) chan tdlib.UpdateMsg); ok {
		r0 = rf(capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan tdlib.UpdateMsg)
		}
	}

	return r0
}

// GetRecentInlineBots provides a mock function with given fields:
func (_m *Mock) GetRecentInlineBots() (*tdlib.Users, error) {
	ret := _m.Called()

	var r0 *tdlib.Users
	if rf, ok := ret.Get(0).(func() *tdlib.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentStickers provides a mock function with given fields: isAttached
func (_m *Mock) GetRecentStickers(isAttached bool) (*tdlib.Stickers, error) {
	ret := _m.Called(isAttached)

	var r0 *tdlib.Stickers
	if rf, ok := ret.Get(0).(func(bool) *tdlib.Stickers); ok {
		r0 = rf(isAttached)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Stickers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(isAttached)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentlyVisitedTMeUrls provides a mock function with given fields: referrer
func (_m *Mock) GetRecentlyVisitedTMeUrls(referrer string) (*tdlib.TMeUrls, error) {
	ret := _m.Called(referrer)

	var r0 *tdlib.TMeUrls
	if rf, ok := ret.Get(0).(func(string) *tdlib.TMeUrls); ok {
		r0 = rf(referrer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TMeUrls)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(referrer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecoveryEmailAddress provides a mock function with given fields: password
func (_m *Mock) GetRecoveryEmailAddress(password string) (*tdlib.RecoveryEmailAddress, error) {
	ret := _m.Called(password)

	var r0 *tdlib.RecoveryEmailAddress
	if rf, ok := ret.Get(0).(func(string) *tdlib.RecoveryEmailAddress); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.RecoveryEmailAddress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemoteFile provides a mock function with given fields: remoteFileId, fileType
func (_m *Mock) GetRemoteFile(remoteFileId string, fileType tdlib.FileType) (*tdlib.File, error) {
	ret := _m.Called(remoteFileId, fileType)

	var r0 *tdlib.File
	if rf, ok := ret.Get(0).(func(string, tdlib.FileType) *tdlib.File); ok {
		r0 = rf(remoteFileId, fileType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tdlib.FileType) error); ok {
		r1 = rf(remoteFileId, fileType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepliedMessage provides a mock function with given fields: chatId, messageId
func (_m *Mock) GetRepliedMessage(chatId int64, messageId int64) (*tdlib.Message, error) {
	ret := _m.Called(chatId, messageId)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64) *tdlib.Message); ok {
		r0 = rf(chatId, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavedAnimations provides a mock function with given fields:
func (_m *Mock) GetSavedAnimations() (*tdlib.Animations, error) {
	ret := _m.Called()

	var r0 *tdlib.Animations
	if rf, ok := ret.Get(0).(func() *tdlib.Animations); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Animations)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavedOrderInfo provides a mock function with given fields:
func (_m *Mock) GetSavedOrderInfo() (*tdlib.OrderInfo, error) {
	ret := _m.Called()

	var r0 *tdlib.OrderInfo
	if rf, ok := ret.Get(0).(func() *tdlib.OrderInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.OrderInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScopeNotificationSettings provides a mock function with given fields: scope
func (_m *Mock) GetScopeNotificationSettings(scope tdlib.NotificationSettingsScope) (*tdlib.ScopeNotificationSettings, error) {
	ret := _m.Called(scope)

	var r0 *tdlib.ScopeNotificationSettings
	if rf, ok := ret.Get(0).(func(tdlib.NotificationSettingsScope) *tdlib.ScopeNotificationSettings); ok {
		r0 = rf(scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ScopeNotificationSettings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.NotificationSettingsScope) error); ok {
		r1 = rf(scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretChat provides a mock function with given fields: secretChatId
func (_m *Mock) GetSecretChat(secretChatId int32) (*tdlib.SecretChat, error) {
	ret := _m.Called(secretChatId)

	var r0 *tdlib.SecretChat
	if rf, ok := ret.Get(0).(func(int32) *tdlib.SecretChat); ok {
		r0 = rf(secretChatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.SecretChat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(secretChatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStickerEmojis provides a mock function with given fields: sticker
func (_m *Mock) GetStickerEmojis(sticker tdlib.InputFile) (*tdlib.Emojis, error) {
	ret := _m.Called(sticker)

	var r0 *tdlib.Emojis
	if rf, ok := ret.Get(0).(func(tdlib.InputFile) *tdlib.Emojis); ok {
		r0 = rf(sticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Emojis)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputFile) error); ok {
		r1 = rf(sticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStickerSet provides a mock function with given fields: setId
func (_m *Mock) GetStickerSet(setId tdlib.JSONInt64) (*tdlib.StickerSet, error) {
	ret := _m.Called(setId)

	var r0 *tdlib.StickerSet
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64) *tdlib.StickerSet); ok {
		r0 = rf(setId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64) error); ok {
		r1 = rf(setId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStickers provides a mock function with given fields: emoji, limit
func (_m *Mock) GetStickers(emoji string, limit int32) (*tdlib.Stickers, error) {
	ret := _m.Called(emoji, limit)

	var r0 *tdlib.Stickers
	if rf, ok := ret.Get(0).(func(string, int32) *tdlib.Stickers); ok {
		r0 = rf(emoji, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Stickers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(emoji, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageStatistics provides a mock function with given fields: chatLimit
func (_m *Mock) GetStorageStatistics(chatLimit int32) (*tdlib.StorageStatistics, error) {
	ret := _m.Called(chatLimit)

	var r0 *tdlib.StorageStatistics
	if rf, ok := ret.Get(0).(func(int32) *tdlib.StorageStatistics); ok {
		r0 = rf(chatLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StorageStatistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(chatLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageStatisticsFast provides a mock function with given fields:
func (_m *Mock) GetStorageStatisticsFast() (*tdlib.StorageStatisticsFast, error) {
	ret := _m.Called()

	var r0 *tdlib.StorageStatisticsFast
	if rf, ok := ret.Get(0).(func() *tdlib.StorageStatisticsFast); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StorageStatisticsFast)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuitableDiscussionChats provides a mock function with given fields:
func (_m *Mock) GetSuitableDiscussionChats() (*tdlib.Chats, error) {
	ret := _m.Called()

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func() *tdlib.Chats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupergroup provides a mock function with given fields: supergroupId
func (_m *Mock) GetSupergroup(supergroupId int32) (*tdlib.Supergroup, error) {
	ret := _m.Called(supergroupId)

	var r0 *tdlib.Supergroup
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Supergroup); ok {
		r0 = rf(supergroupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Supergroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(supergroupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupergroupFullInfo provides a mock function with given fields: supergroupId
func (_m *Mock) GetSupergroupFullInfo(supergroupId int32) (*tdlib.SupergroupFullInfo, error) {
	ret := _m.Called(supergroupId)

	var r0 *tdlib.SupergroupFullInfo
	if rf, ok := ret.Get(0).(func(int32) *tdlib.SupergroupFullInfo); ok {
		r0 = rf(supergroupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.SupergroupFullInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(supergroupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupergroupMembers provides a mock function with given fields: supergroupId, filter, offset, limit
func (_m *Mock) GetSupergroupMembers(supergroupId int32, filter tdlib.SupergroupMembersFilter, offset int32, limit int32) (*tdlib.ChatMembers, error) {
	ret := _m.Called(supergroupId, filter, offset, limit)

	var r0 *tdlib.ChatMembers
	if rf, ok := ret.Get(0).(func(int32, tdlib.SupergroupMembersFilter, int32, int32) *tdlib.ChatMembers); ok {
		r0 = rf(supergroupId, filter, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ChatMembers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, tdlib.SupergroupMembersFilter, int32, int32) error); ok {
		r1 = rf(supergroupId, filter, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupportUser provides a mock function with given fields:
func (_m *Mock) GetSupportUser() (*tdlib.User, error) {
	ret := _m.Called()

	var r0 *tdlib.User
	if rf, ok := ret.Get(0).(func() *tdlib.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemporaryPasswordState provides a mock function with given fields:
func (_m *Mock) GetTemporaryPasswordState() (*tdlib.TemporaryPasswordState, error) {
	ret := _m.Called()

	var r0 *tdlib.TemporaryPasswordState
	if rf, ok := ret.Get(0).(func() *tdlib.TemporaryPasswordState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TemporaryPasswordState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTextEntities provides a mock function with given fields: text
func (_m *Mock) GetTextEntities(text string) (*tdlib.TextEntities, error) {
	ret := _m.Called(text)

	var r0 *tdlib.TextEntities
	if rf, ok := ret.Get(0).(func(string) *tdlib.TextEntities); ok {
		r0 = rf(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TextEntities)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopChats provides a mock function with given fields: category, limit
func (_m *Mock) GetTopChats(category tdlib.TopChatCategory, limit int32) (*tdlib.Chats, error) {
	ret := _m.Called(category, limit)

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func(tdlib.TopChatCategory, int32) *tdlib.Chats); ok {
		r0 = rf(category, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.TopChatCategory, int32) error); ok {
		r1 = rf(category, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrendingStickerSets provides a mock function with given fields:
func (_m *Mock) GetTrendingStickerSets() (*tdlib.StickerSets, error) {
	ret := _m.Called()

	var r0 *tdlib.StickerSets
	if rf, ok := ret.Get(0).(func() *tdlib.StickerSets); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userId
func (_m *Mock) GetUser(userId int32) (*tdlib.User, error) {
	ret := _m.Called(userId)

	var r0 *tdlib.User
	if rf, ok := ret.Get(0).(func(int32) *tdlib.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserFullInfo provides a mock function with given fields: userId
func (_m *Mock) GetUserFullInfo(userId int32) (*tdlib.UserFullInfo, error) {
	ret := _m.Called(userId)

	var r0 *tdlib.UserFullInfo
	if rf, ok := ret.Get(0).(func(int32) *tdlib.UserFullInfo); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.UserFullInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPrivacySettingRules provides a mock function with given fields: setting
func (_m *Mock) GetUserPrivacySettingRules(setting tdlib.UserPrivacySetting) (*tdlib.UserPrivacySettingRules, error) {
	ret := _m.Called(setting)

	var r0 *tdlib.UserPrivacySettingRules
	if rf, ok := ret.Get(0).(func(tdlib.UserPrivacySetting) *tdlib.UserPrivacySettingRules); ok {
		r0 = rf(setting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.UserPrivacySettingRules)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.UserPrivacySetting) error); ok {
		r1 = rf(setting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfilePhotos provides a mock function with given fields: userId, offset, limit
func (_m *Mock) GetUserProfilePhotos(userId int32, offset int32, limit int32) (*tdlib.UserProfilePhotos, error) {
	ret := _m.Called(userId, offset, limit)

	var r0 *tdlib.UserProfilePhotos
	if rf, ok := ret.Get(0).(func(int32, int32, int32) *tdlib.UserProfilePhotos); ok {
		r0 = rf(userId, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.UserProfilePhotos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int32, int32) error); ok {
		r1 = rf(userId, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebPageInstantView provides a mock function with given fields: url, forceFull
func (_m *Mock) GetWebPageInstantView(url string, forceFull bool) (*tdlib.WebPageInstantView, error) {
	ret := _m.Called(url, forceFull)

	var r0 *tdlib.WebPageInstantView
	if rf, ok := ret.Get(0).(func(string, bool) *tdlib.WebPageInstantView); ok {
		r0 = rf(url, forceFull)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.WebPageInstantView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(url, forceFull)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebPagePreview provides a mock function with given fields: text
func (_m *Mock) GetWebPagePreview(text *tdlib.FormattedText) (*tdlib.WebPage, error) {
	ret := _m.Called(text)

	var r0 *tdlib.WebPage
	if rf, ok := ret.Get(0).(func(*tdlib.FormattedText) *tdlib.WebPage); ok {
		r0 = rf(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.WebPage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.FormattedText) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportContacts provides a mock function with given fields: contacts
func (_m *Mock) ImportContacts(contacts []tdlib.Contact) (*tdlib.ImportedContacts, error) {
	ret := _m.Called(contacts)

	var r0 *tdlib.ImportedContacts
	if rf, ok := ret.Get(0).(func([]tdlib.Contact) *tdlib.ImportedContacts); ok {
		r0 = rf(contacts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ImportedContacts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]tdlib.Contact) error); ok {
		r1 = rf(contacts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinChat provides a mock function with given fields: chatId
func (_m *Mock) JoinChat(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinChatByInviteLink provides a mock function with given fields: inviteLink
func (_m *Mock) JoinChatByInviteLink(inviteLink string) (*tdlib.Chat, error) {
	ret := _m.Called(inviteLink)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(string) *tdlib.Chat); ok {
		r0 = rf(inviteLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(inviteLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaveChat provides a mock function with given fields: chatId
func (_m *Mock) LeaveChat(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogOut provides a mock function with given fields:
func (_m *Mock) LogOut() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenChat provides a mock function with given fields: chatId
func (_m *Mock) OpenChat(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenMessageContent provides a mock function with given fields: chatId, messageId
func (_m *Mock) OpenMessageContent(chatId int64, messageId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, messageId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int64) *tdlib.Ok); ok {
		r0 = rf(chatId, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OptimizeStorage provides a mock function with given fields: size, ttl, count, immunityDelay, fileTypes, chatIds, excludeChatIds, chatLimit
func (_m *Mock) OptimizeStorage(size int64, ttl int32, count int32, immunityDelay int32, fileTypes []tdlib.FileType, chatIds []int64, excludeChatIds []int64, chatLimit int32) (*tdlib.StorageStatistics, error) {
	ret := _m.Called(size, ttl, count, immunityDelay, fileTypes, chatIds, excludeChatIds, chatLimit)

	var r0 *tdlib.StorageStatistics
	if rf, ok := ret.Get(0).(func(int64, int32, int32, int32, []tdlib.FileType, []int64, []int64, int32) *tdlib.StorageStatistics); ok {
		r0 = rf(size, ttl, count, immunityDelay, fileTypes, chatIds, excludeChatIds, chatLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StorageStatistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32, int32, int32, []tdlib.FileType, []int64, []int64, int32) error); ok {
		r1 = rf(size, ttl, count, immunityDelay, fileTypes, chatIds, excludeChatIds, chatLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTextEntities provides a mock function with given fields: text, parseMode
func (_m *Mock) ParseTextEntities(text string, parseMode tdlib.TextParseMode) (*tdlib.FormattedText, error) {
	ret := _m.Called(text, parseMode)

	var r0 *tdlib.FormattedText
	if rf, ok := ret.Get(0).(func(string, tdlib.TextParseMode) *tdlib.FormattedText); ok {
		r0 = rf(text, parseMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.FormattedText)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tdlib.TextParseMode) error); ok {
		r1 = rf(text, parseMode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PinChatMessage provides a mock function with given fields: chatId, messageId, disableNotification
func (_m *Mock) PinChatMessage(chatId int64, messageId int64, disableNotification bool) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, messageId, disableNotification)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int64, bool) *tdlib.Ok); ok {
		r0 = rf(chatId, messageId, disableNotification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, bool) error); ok {
		r1 = rf(chatId, messageId, disableNotification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingProxy provides a mock function with given fields: proxyId
func (_m *Mock) PingProxy(proxyId int32) (*tdlib.Seconds, error) {
	ret := _m.Called(proxyId)

	var r0 *tdlib.Seconds
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Seconds); ok {
		r0 = rf(proxyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Seconds)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(proxyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPushNotification provides a mock function with given fields: payload
func (_m *Mock) ProcessPushNotification(payload string) (*tdlib.Ok, error) {
	ret := _m.Called(payload)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAllChatMentions provides a mock function with given fields: chatId
func (_m *Mock) ReadAllChatMentions(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFilePart provides a mock function with given fields: fileId, offset, count
func (_m *Mock) ReadFilePart(fileId int32, offset int32, count int32) (*tdlib.FilePart, error) {
	ret := _m.Called(fileId, offset, count)

	var r0 *tdlib.FilePart
	if rf, ok := ret.Get(0).(func(int32, int32, int32) *tdlib.FilePart); ok {
		r0 = rf(fileId, offset, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.FilePart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int32, int32) error); ok {
		r1 = rf(fileId, offset, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Receive provides a mock function with given fields: timeout
func (_m *Mock) Receive(timeout float64) []byte {
	ret := _m.Called(timeout)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(float64) []byte); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// RecoverAuthenticationPassword provides a mock function with given fields: recoveryCode
func (_m *Mock) RecoverAuthenticationPassword(recoveryCode string) (*tdlib.Ok, error) {
	ret := _m.Called(recoveryCode)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(recoveryCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(recoveryCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecoverPassword provides a mock function with given fields: recoveryCode
func (_m *Mock) RecoverPassword(recoveryCode string) (*tdlib.PasswordState, error) {
	ret := _m.Called(recoveryCode)

	var r0 *tdlib.PasswordState
	if rf, ok := ret.Get(0).(func(string) *tdlib.PasswordState); ok {
		r0 = rf(recoveryCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PasswordState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(recoveryCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDevice provides a mock function with given fields: deviceToken, otherUserIds
func (_m *Mock) RegisterDevice(deviceToken tdlib.DeviceToken, otherUserIds []int32) (*tdlib.PushReceiverId, error) {
	ret := _m.Called(deviceToken, otherUserIds)

	var r0 *tdlib.PushReceiverId
	if rf, ok := ret.Get(0).(func(tdlib.DeviceToken, []int32) *tdlib.PushReceiverId); ok {
		r0 = rf(deviceToken, otherUserIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PushReceiverId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.DeviceToken, []int32) error); ok {
		r1 = rf(deviceToken, otherUserIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: firstName, lastName
func (_m *Mock) RegisterUser(firstName string, lastName string) (*tdlib.Ok, error) {
	ret := _m.Called(firstName, lastName)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, string) *tdlib.Ok); ok {
		r0 = rf(firstName, lastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(firstName, lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveBackground provides a mock function with given fields: backgroundId
func (_m *Mock) RemoveBackground(backgroundId tdlib.JSONInt64) (*tdlib.Ok, error) {
	ret := _m.Called(backgroundId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64) *tdlib.Ok); ok {
		r0 = rf(backgroundId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64) error); ok {
		r1 = rf(backgroundId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveChatActionBar provides a mock function with given fields: chatId
func (_m *Mock) RemoveChatActionBar(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveContacts provides a mock function with given fields: userIds
func (_m *Mock) RemoveContacts(userIds []int32) (*tdlib.Ok, error) {
	ret := _m.Called(userIds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func([]int32) *tdlib.Ok); ok {
		r0 = rf(userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFavoriteSticker provides a mock function with given fields: sticker
func (_m *Mock) RemoveFavoriteSticker(sticker tdlib.InputFile) (*tdlib.Ok, error) {
	ret := _m.Called(sticker)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.InputFile) *tdlib.Ok); ok {
		r0 = rf(sticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputFile) error); ok {
		r1 = rf(sticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNotification provides a mock function with given fields: notificationGroupId, notificationId
func (_m *Mock) RemoveNotification(notificationGroupId int32, notificationId int32) (*tdlib.Ok, error) {
	ret := _m.Called(notificationGroupId, notificationId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, int32) *tdlib.Ok); ok {
		r0 = rf(notificationGroupId, notificationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int32) error); ok {
		r1 = rf(notificationGroupId, notificationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNotificationGroup provides a mock function with given fields: notificationGroupId, maxNotificationId
func (_m *Mock) RemoveNotificationGroup(notificationGroupId int32, maxNotificationId int32) (*tdlib.Ok, error) {
	ret := _m.Called(notificationGroupId, maxNotificationId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, int32) *tdlib.Ok); ok {
		r0 = rf(notificationGroupId, maxNotificationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int32) error); ok {
		r1 = rf(notificationGroupId, maxNotificationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveProxy provides a mock function with given fields: proxyId
func (_m *Mock) RemoveProxy(proxyId int32) (*tdlib.Ok, error) {
	ret := _m.Called(proxyId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(proxyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(proxyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRecentHashtag provides a mock function with given fields: hashtag
func (_m *Mock) RemoveRecentHashtag(hashtag string) (*tdlib.Ok, error) {
	ret := _m.Called(hashtag)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(hashtag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hashtag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRecentSticker provides a mock function with given fields: isAttached, sticker
func (_m *Mock) RemoveRecentSticker(isAttached bool, sticker tdlib.InputFile) (*tdlib.Ok, error) {
	ret := _m.Called(isAttached, sticker)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(bool, tdlib.InputFile) *tdlib.Ok); ok {
		r0 = rf(isAttached, sticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, tdlib.InputFile) error); ok {
		r1 = rf(isAttached, sticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRecentlyFoundChat provides a mock function with given fields: chatId
func (_m *Mock) RemoveRecentlyFoundChat(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSavedAnimation provides a mock function with given fields: animation
func (_m *Mock) RemoveSavedAnimation(animation tdlib.InputFile) (*tdlib.Ok, error) {
	ret := _m.Called(animation)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.InputFile) *tdlib.Ok); ok {
		r0 = rf(animation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputFile) error); ok {
		r1 = rf(animation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveStickerFromSet provides a mock function with given fields: sticker
func (_m *Mock) RemoveStickerFromSet(sticker tdlib.InputFile) (*tdlib.Ok, error) {
	ret := _m.Called(sticker)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.InputFile) *tdlib.Ok); ok {
		r0 = rf(sticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputFile) error); ok {
		r1 = rf(sticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTopChat provides a mock function with given fields: category, chatId
func (_m *Mock) RemoveTopChat(category tdlib.TopChatCategory, chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(category, chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.TopChatCategory, int64) *tdlib.Ok); ok {
		r0 = rf(category, chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.TopChatCategory, int64) error); ok {
		r1 = rf(category, chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReorderInstalledStickerSets provides a mock function with given fields: isMasks, stickerSetIds
func (_m *Mock) ReorderInstalledStickerSets(isMasks bool, stickerSetIds []tdlib.JSONInt64) (*tdlib.Ok, error) {
	ret := _m.Called(isMasks, stickerSetIds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(bool, []tdlib.JSONInt64) *tdlib.Ok); ok {
		r0 = rf(isMasks, stickerSetIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, []tdlib.JSONInt64) error); ok {
		r1 = rf(isMasks, stickerSetIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportChat provides a mock function with given fields: chatId, reason, messageIds
func (_m *Mock) ReportChat(chatId int64, reason tdlib.ChatReportReason, messageIds []int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, reason, messageIds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, tdlib.ChatReportReason, []int64) *tdlib.Ok); ok {
		r0 = rf(chatId, reason, messageIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, tdlib.ChatReportReason, []int64) error); ok {
		r1 = rf(chatId, reason, messageIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportSupergroupSpam provides a mock function with given fields: supergroupId, userId, messageIds
func (_m *Mock) ReportSupergroupSpam(supergroupId int32, userId int32, messageIds []int64) (*tdlib.Ok, error) {
	ret := _m.Called(supergroupId, userId, messageIds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, int32, []int64) *tdlib.Ok); ok {
		r0 = rf(supergroupId, userId, messageIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int32, []int64) error); ok {
		r1 = rf(supergroupId, userId, messageIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestAuthenticationPasswordRecovery provides a mock function with given fields:
func (_m *Mock) RequestAuthenticationPasswordRecovery() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestPasswordRecovery provides a mock function with given fields:
func (_m *Mock) RequestPasswordRecovery() (*tdlib.EmailAddressAuthenticationCodeInfo, error) {
	ret := _m.Called()

	var r0 *tdlib.EmailAddressAuthenticationCodeInfo
	if rf, ok := ret.Get(0).(func() *tdlib.EmailAddressAuthenticationCodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.EmailAddressAuthenticationCodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestQrCodeAuthentication provides a mock function with given fields: otherUserIds
func (_m *Mock) RequestQrCodeAuthentication(otherUserIds []int32) (*tdlib.Ok, error) {
	ret := _m.Called(otherUserIds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func([]int32) *tdlib.Ok); ok {
		r0 = rf(otherUserIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(otherUserIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendAuthenticationCode provides a mock function with given fields:
func (_m *Mock) ResendAuthenticationCode() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendChangePhoneNumberCode provides a mock function with given fields:
func (_m *Mock) ResendChangePhoneNumberCode() (*tdlib.AuthenticationCodeInfo, error) {
	ret := _m.Called()

	var r0 *tdlib.AuthenticationCodeInfo
	if rf, ok := ret.Get(0).(func() *tdlib.AuthenticationCodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.AuthenticationCodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendEmailAddressVerificationCode provides a mock function with given fields:
func (_m *Mock) ResendEmailAddressVerificationCode() (*tdlib.EmailAddressAuthenticationCodeInfo, error) {
	ret := _m.Called()

	var r0 *tdlib.EmailAddressAuthenticationCodeInfo
	if rf, ok := ret.Get(0).(func() *tdlib.EmailAddressAuthenticationCodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.EmailAddressAuthenticationCodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendMessages provides a mock function with given fields: chatId, messageIds
func (_m *Mock) ResendMessages(chatId int64, messageIds []int64) (*tdlib.Messages, error) {
	ret := _m.Called(chatId, messageIds)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(int64, []int64) *tdlib.Messages); ok {
		r0 = rf(chatId, messageIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, []int64) error); ok {
		r1 = rf(chatId, messageIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendPhoneNumberConfirmationCode provides a mock function with given fields:
func (_m *Mock) ResendPhoneNumberConfirmationCode() (*tdlib.AuthenticationCodeInfo, error) {
	ret := _m.Called()

	var r0 *tdlib.AuthenticationCodeInfo
	if rf, ok := ret.Get(0).(func() *tdlib.AuthenticationCodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.AuthenticationCodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendPhoneNumberVerificationCode provides a mock function with given fields:
func (_m *Mock) ResendPhoneNumberVerificationCode() (*tdlib.AuthenticationCodeInfo, error) {
	ret := _m.Called()

	var r0 *tdlib.AuthenticationCodeInfo
	if rf, ok := ret.Get(0).(func() *tdlib.AuthenticationCodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.AuthenticationCodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendRecoveryEmailAddressCode provides a mock function with given fields:
func (_m *Mock) ResendRecoveryEmailAddressCode() (*tdlib.PasswordState, error) {
	ret := _m.Called()

	var r0 *tdlib.PasswordState
	if rf, ok := ret.Get(0).(func() *tdlib.PasswordState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PasswordState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetAllNotificationSettings provides a mock function with given fields:
func (_m *Mock) ResetAllNotificationSettings() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetBackgrounds provides a mock function with given fields:
func (_m *Mock) ResetBackgrounds() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetNetworkStatistics provides a mock function with given fields:
func (_m *Mock) ResetNetworkStatistics() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveApplicationLogEvent provides a mock function with given fields: typeParam, chatId, data
func (_m *Mock) SaveApplicationLogEvent(typeParam string, chatId int64, data tdlib.JsonValue) (*tdlib.Ok, error) {
	ret := _m.Called(typeParam, chatId, data)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, int64, tdlib.JsonValue) *tdlib.Ok); ok {
		r0 = rf(typeParam, chatId, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, tdlib.JsonValue) error); ok {
		r1 = rf(typeParam, chatId, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBackground provides a mock function with given fields: name
func (_m *Mock) SearchBackground(name string) (*tdlib.Background, error) {
	ret := _m.Called(name)

	var r0 *tdlib.Background
	if rf, ok := ret.Get(0).(func(string) *tdlib.Background); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Background)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCallMessages provides a mock function with given fields: fromMessageId, limit, onlyMissed
func (_m *Mock) SearchCallMessages(fromMessageId int64, limit int32, onlyMissed bool) (*tdlib.Messages, error) {
	ret := _m.Called(fromMessageId, limit, onlyMissed)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(int64, int32, bool) *tdlib.Messages); ok {
		r0 = rf(fromMessageId, limit, onlyMissed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32, bool) error); ok {
		r1 = rf(fromMessageId, limit, onlyMissed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchChatMembers provides a mock function with given fields: chatId, query, limit, filter
func (_m *Mock) SearchChatMembers(chatId int64, query string, limit int32, filter tdlib.ChatMembersFilter) (*tdlib.ChatMembers, error) {
	ret := _m.Called(chatId, query, limit, filter)

	var r0 *tdlib.ChatMembers
	if rf, ok := ret.Get(0).(func(int64, string, int32, tdlib.ChatMembersFilter) *tdlib.ChatMembers); ok {
		r0 = rf(chatId, query, limit, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ChatMembers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string, int32, tdlib.ChatMembersFilter) error); ok {
		r1 = rf(chatId, query, limit, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchChatMessages provides a mock function with given fields: chatId, query, senderUserId, fromMessageId, offset, limit, filter
func (_m *Mock) SearchChatMessages(chatId int64, query string, senderUserId int32, fromMessageId int64, offset int32, limit int32, filter tdlib.SearchMessagesFilter) (*tdlib.Messages, error) {
	ret := _m.Called(chatId, query, senderUserId, fromMessageId, offset, limit, filter)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(int64, string, int32, int64, int32, int32, tdlib.SearchMessagesFilter) *tdlib.Messages); ok {
		r0 = rf(chatId, query, senderUserId, fromMessageId, offset, limit, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string, int32, int64, int32, int32, tdlib.SearchMessagesFilter) error); ok {
		r1 = rf(chatId, query, senderUserId, fromMessageId, offset, limit, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchChatRecentLocationMessages provides a mock function with given fields: chatId, limit
func (_m *Mock) SearchChatRecentLocationMessages(chatId int64, limit int32) (*tdlib.Messages, error) {
	ret := _m.Called(chatId, limit)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(int64, int32) *tdlib.Messages); ok {
		r0 = rf(chatId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32) error); ok {
		r1 = rf(chatId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchChats provides a mock function with given fields: query, limit
func (_m *Mock) SearchChats(query string, limit int32) (*tdlib.Chats, error) {
	ret := _m.Called(query, limit)

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func(string, int32) *tdlib.Chats); ok {
		r0 = rf(query, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(query, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchChatsNearby provides a mock function with given fields: location
func (_m *Mock) SearchChatsNearby(location *tdlib.Location) (*tdlib.ChatsNearby, error) {
	ret := _m.Called(location)

	var r0 *tdlib.ChatsNearby
	if rf, ok := ret.Get(0).(func(*tdlib.Location) *tdlib.ChatsNearby); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ChatsNearby)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.Location) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchChatsOnServer provides a mock function with given fields: query, limit
func (_m *Mock) SearchChatsOnServer(query string, limit int32) (*tdlib.Chats, error) {
	ret := _m.Called(query, limit)

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func(string, int32) *tdlib.Chats); ok {
		r0 = rf(query, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(query, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchContacts provides a mock function with given fields: query, limit
func (_m *Mock) SearchContacts(query string, limit int32) (*tdlib.Users, error) {
	ret := _m.Called(query, limit)

	var r0 *tdlib.Users
	if rf, ok := ret.Get(0).(func(string, int32) *tdlib.Users); ok {
		r0 = rf(query, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(query, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchEmojis provides a mock function with given fields: text, exactMatch, inputLanguageCode
func (_m *Mock) SearchEmojis(text string, exactMatch bool, inputLanguageCode string) (*tdlib.Emojis, error) {
	ret := _m.Called(text, exactMatch, inputLanguageCode)

	var r0 *tdlib.Emojis
	if rf, ok := ret.Get(0).(func(string, bool, string) *tdlib.Emojis); ok {
		r0 = rf(text, exactMatch, inputLanguageCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Emojis)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, string) error); ok {
		r1 = rf(text, exactMatch, inputLanguageCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchHashtags provides a mock function with given fields: prefix, limit
func (_m *Mock) SearchHashtags(prefix string, limit int32) (*tdlib.Hashtags, error) {
	ret := _m.Called(prefix, limit)

	var r0 *tdlib.Hashtags
	if rf, ok := ret.Get(0).(func(string, int32) *tdlib.Hashtags); ok {
		r0 = rf(prefix, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Hashtags)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(prefix, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchInstalledStickerSets provides a mock function with given fields: isMasks, query, limit
func (_m *Mock) SearchInstalledStickerSets(isMasks bool, query string, limit int32) (*tdlib.StickerSets, error) {
	ret := _m.Called(isMasks, query, limit)

	var r0 *tdlib.StickerSets
	if rf, ok := ret.Get(0).(func(bool, string, int32) *tdlib.StickerSets); ok {
		r0 = rf(isMasks, query, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, string, int32) error); ok {
		r1 = rf(isMasks, query, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchMessages provides a mock function with given fields: chatList, query, offsetDate, offsetChatId, offsetMessageId, limit
func (_m *Mock) SearchMessages(chatList tdlib.ChatList, query string, offsetDate int32, offsetChatId int64, offsetMessageId int64, limit int32) (*tdlib.Messages, error) {
	ret := _m.Called(chatList, query, offsetDate, offsetChatId, offsetMessageId, limit)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(tdlib.ChatList, string, int32, int64, int64, int32) *tdlib.Messages); ok {
		r0 = rf(chatList, query, offsetDate, offsetChatId, offsetMessageId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.ChatList, string, int32, int64, int64, int32) error); ok {
		r1 = rf(chatList, query, offsetDate, offsetChatId, offsetMessageId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPublicChat provides a mock function with given fields: username
func (_m *Mock) SearchPublicChat(username string) (*tdlib.Chat, error) {
	ret := _m.Called(username)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(string) *tdlib.Chat); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPublicChats provides a mock function with given fields: query
func (_m *Mock) SearchPublicChats(query string) (*tdlib.Chats, error) {
	ret := _m.Called(query)

	var r0 *tdlib.Chats
	if rf, ok := ret.Get(0).(func(string) *tdlib.Chats); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchSecretMessages provides a mock function with given fields: chatId, query, fromSearchId, limit, filter
func (_m *Mock) SearchSecretMessages(chatId int64, query string, fromSearchId tdlib.JSONInt64, limit int32, filter tdlib.SearchMessagesFilter) (*tdlib.FoundMessages, error) {
	ret := _m.Called(chatId, query, fromSearchId, limit, filter)

	var r0 *tdlib.FoundMessages
	if rf, ok := ret.Get(0).(func(int64, string, tdlib.JSONInt64, int32, tdlib.SearchMessagesFilter) *tdlib.FoundMessages); ok {
		r0 = rf(chatId, query, fromSearchId, limit, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.FoundMessages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string, tdlib.JSONInt64, int32, tdlib.SearchMessagesFilter) error); ok {
		r1 = rf(chatId, query, fromSearchId, limit, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchStickerSet provides a mock function with given fields: name
func (_m *Mock) SearchStickerSet(name string) (*tdlib.StickerSet, error) {
	ret := _m.Called(name)

	var r0 *tdlib.StickerSet
	if rf, ok := ret.Get(0).(func(string) *tdlib.StickerSet); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchStickerSets provides a mock function with given fields: query
func (_m *Mock) SearchStickerSets(query string) (*tdlib.StickerSets, error) {
	ret := _m.Called(query)

	var r0 *tdlib.StickerSets
	if rf, ok := ret.Get(0).(func(string) *tdlib.StickerSets); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.StickerSets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchStickers provides a mock function with given fields: emoji, limit
func (_m *Mock) SearchStickers(emoji string, limit int32) (*tdlib.Stickers, error) {
	ret := _m.Called(emoji, limit)

	var r0 *tdlib.Stickers
	if rf, ok := ret.Get(0).(func(string, int32) *tdlib.Stickers); ok {
		r0 = rf(emoji, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Stickers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(emoji, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: jsonQuery
func (_m *Mock) Send(jsonQuery interface{}) {
	_m.Called(jsonQuery)
}

// SendAndCatch provides a mock function with given fields: jsonQuery
func (_m *Mock) SendAndCatch(jsonQuery interface{}) (tdlib.UpdateMsg, error) {
	ret := _m.Called(jsonQuery)

	var r0 tdlib.UpdateMsg
	if rf, ok := ret.Get(0).(func(interface{}) tdlib.UpdateMsg); ok {
		r0 = rf(jsonQuery)
	} else {
		r0 = ret.Get(0).(tdlib.UpdateMsg)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(jsonQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendAuthCode provides a mock function with given fields: code
func (_m *Mock) SendAuthCode(code string) (tdlib.AuthorizationState, error) {
	ret := _m.Called(code)

	var r0 tdlib.AuthorizationState
	if rf, ok := ret.Get(0).(func(string) tdlib.AuthorizationState); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.AuthorizationState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendAuthPassword provides a mock function with given fields: password
func (_m *Mock) SendAuthPassword(password string) (tdlib.AuthorizationState, error) {
	ret := _m.Called(password)

	var r0 tdlib.AuthorizationState
	if rf, ok := ret.Get(0).(func(string) tdlib.AuthorizationState); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.AuthorizationState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendBotStartMessage provides a mock function with given fields: botUserId, chatId, parameter
func (_m *Mock) SendBotStartMessage(botUserId int32, chatId int64, parameter string) (*tdlib.Message, error) {
	ret := _m.Called(botUserId, chatId, parameter)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int32, int64, string) *tdlib.Message); ok {
		r0 = rf(botUserId, chatId, parameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int64, string) error); ok {
		r1 = rf(botUserId, chatId, parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCallDebugInformation provides a mock function with given fields: callId, debugInformation
func (_m *Mock) SendCallDebugInformation(callId int32, debugInformation string) (*tdlib.Ok, error) {
	ret := _m.Called(callId, debugInformation)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, string) *tdlib.Ok); ok {
		r0 = rf(callId, debugInformation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, string) error); ok {
		r1 = rf(callId, debugInformation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCallRating provides a mock function with given fields: callId, rating, comment, problems
func (_m *Mock) SendCallRating(callId int32, rating int32, comment string, problems []tdlib.CallProblem) (*tdlib.Ok, error) {
	ret := _m.Called(callId, rating, comment, problems)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, int32, string, []tdlib.CallProblem) *tdlib.Ok); ok {
		r0 = rf(callId, rating, comment, problems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, int32, string, []tdlib.CallProblem) error); ok {
		r1 = rf(callId, rating, comment, problems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChatAction provides a mock function with given fields: chatId, action
func (_m *Mock) SendChatAction(chatId int64, action tdlib.ChatAction) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, action)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, tdlib.ChatAction) *tdlib.Ok); ok {
		r0 = rf(chatId, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, tdlib.ChatAction) error); ok {
		r1 = rf(chatId, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChatScreenshotTakenNotification provides a mock function with given fields: chatId
func (_m *Mock) SendChatScreenshotTakenNotification(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChatSetTtlMessage provides a mock function with given fields: chatId, ttl
func (_m *Mock) SendChatSetTtlMessage(chatId int64, ttl int32) (*tdlib.Message, error) {
	ret := _m.Called(chatId, ttl)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int32) *tdlib.Message); ok {
		r0 = rf(chatId, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32) error); ok {
		r1 = rf(chatId, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCustomRequest provides a mock function with given fields: method, parameters
func (_m *Mock) SendCustomRequest(method string, parameters string) (*tdlib.CustomRequestResult, error) {
	ret := _m.Called(method, parameters)

	var r0 *tdlib.CustomRequestResult
	if rf, ok := ret.Get(0).(func(string, string) *tdlib.CustomRequestResult); ok {
		r0 = rf(method, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.CustomRequestResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(method, parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmailAddressVerificationCode provides a mock function with given fields: emailAddress
func (_m *Mock) SendEmailAddressVerificationCode(emailAddress string) (*tdlib.EmailAddressAuthenticationCodeInfo, error) {
	ret := _m.Called(emailAddress)

	var r0 *tdlib.EmailAddressAuthenticationCodeInfo
	if rf, ok := ret.Get(0).(func(string) *tdlib.EmailAddressAuthenticationCodeInfo); ok {
		r0 = rf(emailAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.EmailAddressAuthenticationCodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(emailAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendInlineQueryResultMessage provides a mock function with given fields: chatId, replyToMessageId, options, queryId, resultId, hideViaBot
func (_m *Mock) SendInlineQueryResultMessage(chatId int64, replyToMessageId int64, options *tdlib.SendMessageOptions, queryId tdlib.JSONInt64, resultId string, hideViaBot bool) (*tdlib.Message, error) {
	ret := _m.Called(chatId, replyToMessageId, options, queryId, resultId, hideViaBot)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64, *tdlib.SendMessageOptions, tdlib.JSONInt64, string, bool) *tdlib.Message); ok {
		r0 = rf(chatId, replyToMessageId, options, queryId, resultId, hideViaBot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, *tdlib.SendMessageOptions, tdlib.JSONInt64, string, bool) error); ok {
		r1 = rf(chatId, replyToMessageId, options, queryId, resultId, hideViaBot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: chatId, replyToMessageId, options, replyMarkup, inputMessageContent
func (_m *Mock) SendMessage(chatId int64, replyToMessageId int64, options *tdlib.SendMessageOptions, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error) {
	ret := _m.Called(chatId, replyToMessageId, options, replyMarkup, inputMessageContent)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64, *tdlib.SendMessageOptions, tdlib.ReplyMarkup, tdlib.InputMessageContent) *tdlib.Message); ok {
		r0 = rf(chatId, replyToMessageId, options, replyMarkup, inputMessageContent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, *tdlib.SendMessageOptions, tdlib.ReplyMarkup, tdlib.InputMessageContent) error); ok {
		r1 = rf(chatId, replyToMessageId, options, replyMarkup, inputMessageContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessageAlbum provides a mock function with given fields: chatId, replyToMessageId, options, inputMessageContents
func (_m *Mock) SendMessageAlbum(chatId int64, replyToMessageId int64, options *tdlib.SendMessageOptions, inputMessageContents []tdlib.InputMessageContent) (*tdlib.Messages, error) {
	ret := _m.Called(chatId, replyToMessageId, options, inputMessageContents)

	var r0 *tdlib.Messages
	if rf, ok := ret.Get(0).(func(int64, int64, *tdlib.SendMessageOptions, []tdlib.InputMessageContent) *tdlib.Messages); ok {
		r0 = rf(chatId, replyToMessageId, options, inputMessageContents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Messages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, *tdlib.SendMessageOptions, []tdlib.InputMessageContent) error); ok {
		r1 = rf(chatId, replyToMessageId, options, inputMessageContents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPassportAuthorizationForm provides a mock function with given fields: autorizationFormId, typeParams
func (_m *Mock) SendPassportAuthorizationForm(autorizationFormId int32, typeParams []tdlib.PassportElementType) (*tdlib.Ok, error) {
	ret := _m.Called(autorizationFormId, typeParams)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, []tdlib.PassportElementType) *tdlib.Ok); ok {
		r0 = rf(autorizationFormId, typeParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, []tdlib.PassportElementType) error); ok {
		r1 = rf(autorizationFormId, typeParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPaymentForm provides a mock function with given fields: chatId, messageId, orderInfoId, shippingOptionId, credentials
func (_m *Mock) SendPaymentForm(chatId int64, messageId int64, orderInfoId string, shippingOptionId string, credentials tdlib.InputCredentials) (*tdlib.PaymentResult, error) {
	ret := _m.Called(chatId, messageId, orderInfoId, shippingOptionId, credentials)

	var r0 *tdlib.PaymentResult
	if rf, ok := ret.Get(0).(func(int64, int64, string, string, tdlib.InputCredentials) *tdlib.PaymentResult); ok {
		r0 = rf(chatId, messageId, orderInfoId, shippingOptionId, credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PaymentResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, string, string, tdlib.InputCredentials) error); ok {
		r1 = rf(chatId, messageId, orderInfoId, shippingOptionId, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPhoneNumber provides a mock function with given fields: phoneNumber
func (_m *Mock) SendPhoneNumber(phoneNumber string) (tdlib.AuthorizationState, error) {
	ret := _m.Called(phoneNumber)

	var r0 tdlib.AuthorizationState
	if rf, ok := ret.Get(0).(func(string) tdlib.AuthorizationState); ok {
		r0 = rf(phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.AuthorizationState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPhoneNumberConfirmationCode provides a mock function with given fields: hash, phoneNumber, settings
func (_m *Mock) SendPhoneNumberConfirmationCode(hash string, phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.AuthenticationCodeInfo, error) {
	ret := _m.Called(hash, phoneNumber, settings)

	var r0 *tdlib.AuthenticationCodeInfo
	if rf, ok := ret.Get(0).(func(string, string, *tdlib.PhoneNumberAuthenticationSettings) *tdlib.AuthenticationCodeInfo); ok {
		r0 = rf(hash, phoneNumber, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.AuthenticationCodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *tdlib.PhoneNumberAuthenticationSettings) error); ok {
		r1 = rf(hash, phoneNumber, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPhoneNumberVerificationCode provides a mock function with given fields: phoneNumber, settings
func (_m *Mock) SendPhoneNumberVerificationCode(phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.AuthenticationCodeInfo, error) {
	ret := _m.Called(phoneNumber, settings)

	var r0 *tdlib.AuthenticationCodeInfo
	if rf, ok := ret.Get(0).(func(string, *tdlib.PhoneNumberAuthenticationSettings) *tdlib.AuthenticationCodeInfo); ok {
		r0 = rf(phoneNumber, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.AuthenticationCodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *tdlib.PhoneNumberAuthenticationSettings) error); ok {
		r1 = rf(phoneNumber, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAccountTtl provides a mock function with given fields: ttl
func (_m *Mock) SetAccountTtl(ttl *tdlib.AccountTtl) (*tdlib.Ok, error) {
	ret := _m.Called(ttl)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(*tdlib.AccountTtl) *tdlib.Ok); ok {
		r0 = rf(ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.AccountTtl) error); ok {
		r1 = rf(ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAlarm provides a mock function with given fields: seconds
func (_m *Mock) SetAlarm(seconds float64) (*tdlib.Ok, error) {
	ret := _m.Called(seconds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(float64) *tdlib.Ok); ok {
		r0 = rf(seconds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(seconds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAuthenticationPhoneNumber provides a mock function with given fields: phoneNumber, settings
func (_m *Mock) SetAuthenticationPhoneNumber(phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.Ok, error) {
	ret := _m.Called(phoneNumber, settings)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, *tdlib.PhoneNumberAuthenticationSettings) *tdlib.Ok); ok {
		r0 = rf(phoneNumber, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *tdlib.PhoneNumberAuthenticationSettings) error); ok {
		r1 = rf(phoneNumber, settings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAutoDownloadSettings provides a mock function with given fields: settings, typeParam
func (_m *Mock) SetAutoDownloadSettings(settings *tdlib.AutoDownloadSettings, typeParam tdlib.NetworkType) (*tdlib.Ok, error) {
	ret := _m.Called(settings, typeParam)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(*tdlib.AutoDownloadSettings, tdlib.NetworkType) *tdlib.Ok); ok {
		r0 = rf(settings, typeParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.AutoDownloadSettings, tdlib.NetworkType) error); ok {
		r1 = rf(settings, typeParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBackground provides a mock function with given fields: background, typeParam, forDarkTheme
func (_m *Mock) SetBackground(background tdlib.InputBackground, typeParam tdlib.BackgroundType, forDarkTheme bool) (*tdlib.Background, error) {
	ret := _m.Called(background, typeParam, forDarkTheme)

	var r0 *tdlib.Background
	if rf, ok := ret.Get(0).(func(tdlib.InputBackground, tdlib.BackgroundType, bool) *tdlib.Background); ok {
		r0 = rf(background, typeParam, forDarkTheme)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Background)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputBackground, tdlib.BackgroundType, bool) error); ok {
		r1 = rf(background, typeParam, forDarkTheme)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBio provides a mock function with given fields: bio
func (_m *Mock) SetBio(bio string) (*tdlib.Ok, error) {
	ret := _m.Called(bio)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(bio)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bio)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBotUpdatesStatus provides a mock function with given fields: pendingUpdateCount, errorMessage
func (_m *Mock) SetBotUpdatesStatus(pendingUpdateCount int32, errorMessage string) (*tdlib.Ok, error) {
	ret := _m.Called(pendingUpdateCount, errorMessage)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, string) *tdlib.Ok); ok {
		r0 = rf(pendingUpdateCount, errorMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, string) error); ok {
		r1 = rf(pendingUpdateCount, errorMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatChatList provides a mock function with given fields: chatId, chatList
func (_m *Mock) SetChatChatList(chatId int64, chatList tdlib.ChatList) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, chatList)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, tdlib.ChatList) *tdlib.Ok); ok {
		r0 = rf(chatId, chatList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, tdlib.ChatList) error); ok {
		r1 = rf(chatId, chatList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatClientData provides a mock function with given fields: chatId, clientData
func (_m *Mock) SetChatClientData(chatId int64, clientData string) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, clientData)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, string) *tdlib.Ok); ok {
		r0 = rf(chatId, clientData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(chatId, clientData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatDescription provides a mock function with given fields: chatId, description
func (_m *Mock) SetChatDescription(chatId int64, description string) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, description)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, string) *tdlib.Ok); ok {
		r0 = rf(chatId, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(chatId, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatDiscussionGroup provides a mock function with given fields: chatId, discussionChatId
func (_m *Mock) SetChatDiscussionGroup(chatId int64, discussionChatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, discussionChatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int64) *tdlib.Ok); ok {
		r0 = rf(chatId, discussionChatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, discussionChatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatDraftMessage provides a mock function with given fields: chatId, draftMessage
func (_m *Mock) SetChatDraftMessage(chatId int64, draftMessage *tdlib.DraftMessage) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, draftMessage)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, *tdlib.DraftMessage) *tdlib.Ok); ok {
		r0 = rf(chatId, draftMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, *tdlib.DraftMessage) error); ok {
		r1 = rf(chatId, draftMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatLocation provides a mock function with given fields: chatId, location
func (_m *Mock) SetChatLocation(chatId int64, location *tdlib.ChatLocation) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, location)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, *tdlib.ChatLocation) *tdlib.Ok); ok {
		r0 = rf(chatId, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, *tdlib.ChatLocation) error); ok {
		r1 = rf(chatId, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatMemberStatus provides a mock function with given fields: chatId, userId, status
func (_m *Mock) SetChatMemberStatus(chatId int64, userId int32, status tdlib.ChatMemberStatus) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, userId, status)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int32, tdlib.ChatMemberStatus) *tdlib.Ok); ok {
		r0 = rf(chatId, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32, tdlib.ChatMemberStatus) error); ok {
		r1 = rf(chatId, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatNotificationSettings provides a mock function with given fields: chatId, notificationSettings
func (_m *Mock) SetChatNotificationSettings(chatId int64, notificationSettings *tdlib.ChatNotificationSettings) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, notificationSettings)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, *tdlib.ChatNotificationSettings) *tdlib.Ok); ok {
		r0 = rf(chatId, notificationSettings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, *tdlib.ChatNotificationSettings) error); ok {
		r1 = rf(chatId, notificationSettings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatPermissions provides a mock function with given fields: chatId, permissions
func (_m *Mock) SetChatPermissions(chatId int64, permissions *tdlib.ChatPermissions) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, permissions)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, *tdlib.ChatPermissions) *tdlib.Ok); ok {
		r0 = rf(chatId, permissions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, *tdlib.ChatPermissions) error); ok {
		r1 = rf(chatId, permissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatPhoto provides a mock function with given fields: chatId, photo
func (_m *Mock) SetChatPhoto(chatId int64, photo tdlib.InputFile) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, photo)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, tdlib.InputFile) *tdlib.Ok); ok {
		r0 = rf(chatId, photo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, tdlib.InputFile) error); ok {
		r1 = rf(chatId, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatSlowModeDelay provides a mock function with given fields: chatId, slowModeDelay
func (_m *Mock) SetChatSlowModeDelay(chatId int64, slowModeDelay int32) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, slowModeDelay)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int32) *tdlib.Ok); ok {
		r0 = rf(chatId, slowModeDelay)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32) error); ok {
		r1 = rf(chatId, slowModeDelay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChatTitle provides a mock function with given fields: chatId, title
func (_m *Mock) SetChatTitle(chatId int64, title string) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, title)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, string) *tdlib.Ok); ok {
		r0 = rf(chatId, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(chatId, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCustomLanguagePack provides a mock function with given fields: info, strings
func (_m *Mock) SetCustomLanguagePack(info *tdlib.LanguagePackInfo, strings []tdlib.LanguagePackString) (*tdlib.Ok, error) {
	ret := _m.Called(info, strings)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(*tdlib.LanguagePackInfo, []tdlib.LanguagePackString) *tdlib.Ok); ok {
		r0 = rf(info, strings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.LanguagePackInfo, []tdlib.LanguagePackString) error); ok {
		r1 = rf(info, strings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCustomLanguagePackString provides a mock function with given fields: languagePackId, newString
func (_m *Mock) SetCustomLanguagePackString(languagePackId string, newString *tdlib.LanguagePackString) (*tdlib.Ok, error) {
	ret := _m.Called(languagePackId, newString)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, *tdlib.LanguagePackString) *tdlib.Ok); ok {
		r0 = rf(languagePackId, newString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *tdlib.LanguagePackString) error); ok {
		r1 = rf(languagePackId, newString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDatabaseEncryptionKey provides a mock function with given fields: newEncryptionKey
func (_m *Mock) SetDatabaseEncryptionKey(newEncryptionKey []byte) (*tdlib.Ok, error) {
	ret := _m.Called(newEncryptionKey)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func([]byte) *tdlib.Ok); ok {
		r0 = rf(newEncryptionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(newEncryptionKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetFileGenerationProgress provides a mock function with given fields: generationId, expectedSize, localPrefixSize
func (_m *Mock) SetFileGenerationProgress(generationId tdlib.JSONInt64, expectedSize int32, localPrefixSize int32) (*tdlib.Ok, error) {
	ret := _m.Called(generationId, expectedSize, localPrefixSize)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64, int32, int32) *tdlib.Ok); ok {
		r0 = rf(generationId, expectedSize, localPrefixSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64, int32, int32) error); ok {
		r1 = rf(generationId, expectedSize, localPrefixSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetGameScore provides a mock function with given fields: chatId, messageId, editMessage, userId, score, force
func (_m *Mock) SetGameScore(chatId int64, messageId int64, editMessage bool, userId int32, score int32, force bool) (*tdlib.Message, error) {
	ret := _m.Called(chatId, messageId, editMessage, userId, score, force)

	var r0 *tdlib.Message
	if rf, ok := ret.Get(0).(func(int64, int64, bool, int32, int32, bool) *tdlib.Message); ok {
		r0 = rf(chatId, messageId, editMessage, userId, score, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, bool, int32, int32, bool) error); ok {
		r1 = rf(chatId, messageId, editMessage, userId, score, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetInlineGameScore provides a mock function with given fields: inlineMessageId, editMessage, userId, score, force
func (_m *Mock) SetInlineGameScore(inlineMessageId string, editMessage bool, userId int32, score int32, force bool) (*tdlib.Ok, error) {
	ret := _m.Called(inlineMessageId, editMessage, userId, score, force)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, bool, int32, int32, bool) *tdlib.Ok); ok {
		r0 = rf(inlineMessageId, editMessage, userId, score, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, int32, int32, bool) error); ok {
		r1 = rf(inlineMessageId, editMessage, userId, score, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLogStream provides a mock function with given fields: logStream
func (_m *Mock) SetLogStream(logStream tdlib.LogStream) (*tdlib.Ok, error) {
	ret := _m.Called(logStream)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.LogStream) *tdlib.Ok); ok {
		r0 = rf(logStream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.LogStream) error); ok {
		r1 = rf(logStream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLogTagVerbosityLevel provides a mock function with given fields: tag, newVerbosityLevel
func (_m *Mock) SetLogTagVerbosityLevel(tag string, newVerbosityLevel int32) (*tdlib.Ok, error) {
	ret := _m.Called(tag, newVerbosityLevel)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, int32) *tdlib.Ok); ok {
		r0 = rf(tag, newVerbosityLevel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(tag, newVerbosityLevel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLogVerbosityLevel provides a mock function with given fields: newVerbosityLevel
func (_m *Mock) SetLogVerbosityLevel(newVerbosityLevel int32) (*tdlib.Ok, error) {
	ret := _m.Called(newVerbosityLevel)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(newVerbosityLevel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(newVerbosityLevel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetName provides a mock function with given fields: firstName, lastName
func (_m *Mock) SetName(firstName string, lastName string) (*tdlib.Ok, error) {
	ret := _m.Called(firstName, lastName)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, string) *tdlib.Ok); ok {
		r0 = rf(firstName, lastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(firstName, lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNetworkType provides a mock function with given fields: typeParam
func (_m *Mock) SetNetworkType(typeParam tdlib.NetworkType) (*tdlib.Ok, error) {
	ret := _m.Called(typeParam)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.NetworkType) *tdlib.Ok); ok {
		r0 = rf(typeParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.NetworkType) error); ok {
		r1 = rf(typeParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOption provides a mock function with given fields: name, value
func (_m *Mock) SetOption(name string, value tdlib.OptionValue) (*tdlib.Ok, error) {
	ret := _m.Called(name, value)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, tdlib.OptionValue) *tdlib.Ok); ok {
		r0 = rf(name, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tdlib.OptionValue) error); ok {
		r1 = rf(name, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPassportElement provides a mock function with given fields: element, password
func (_m *Mock) SetPassportElement(element tdlib.InputPassportElement, password string) (tdlib.PassportElement, error) {
	ret := _m.Called(element, password)

	var r0 tdlib.PassportElement
	if rf, ok := ret.Get(0).(func(tdlib.InputPassportElement, string) tdlib.PassportElement); ok {
		r0 = rf(element, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.PassportElement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputPassportElement, string) error); ok {
		r1 = rf(element, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPassportElementErrors provides a mock function with given fields: userId, errors
func (_m *Mock) SetPassportElementErrors(userId int32, errors []tdlib.InputPassportElementError) (*tdlib.Ok, error) {
	ret := _m.Called(userId, errors)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, []tdlib.InputPassportElementError) *tdlib.Ok); ok {
		r0 = rf(userId, errors)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, []tdlib.InputPassportElementError) error); ok {
		r1 = rf(userId, errors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPassword provides a mock function with given fields: oldPassword, newPassword, newHint, setRecoveryEmailAddress, newRecoveryEmailAddress
func (_m *Mock) SetPassword(oldPassword string, newPassword string, newHint string, setRecoveryEmailAddress bool, newRecoveryEmailAddress string) (*tdlib.PasswordState, error) {
	ret := _m.Called(oldPassword, newPassword, newHint, setRecoveryEmailAddress, newRecoveryEmailAddress)

	var r0 *tdlib.PasswordState
	if rf, ok := ret.Get(0).(func(string, string, string, bool, string) *tdlib.PasswordState); ok {
		r0 = rf(oldPassword, newPassword, newHint, setRecoveryEmailAddress, newRecoveryEmailAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PasswordState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, bool, string) error); ok {
		r1 = rf(oldPassword, newPassword, newHint, setRecoveryEmailAddress, newRecoveryEmailAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPinnedChats provides a mock function with given fields: chatList, chatIds
func (_m *Mock) SetPinnedChats(chatList tdlib.ChatList, chatIds []int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatList, chatIds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.ChatList, []int64) *tdlib.Ok); ok {
		r0 = rf(chatList, chatIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.ChatList, []int64) error); ok {
		r1 = rf(chatList, chatIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPollAnswer provides a mock function with given fields: chatId, messageId, optionIds
func (_m *Mock) SetPollAnswer(chatId int64, messageId int64, optionIds []int32) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, messageId, optionIds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int64, []int32) *tdlib.Ok); ok {
		r0 = rf(chatId, messageId, optionIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, []int32) error); ok {
		r1 = rf(chatId, messageId, optionIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetProfilePhoto provides a mock function with given fields: photo
func (_m *Mock) SetProfilePhoto(photo tdlib.InputFile) (*tdlib.Ok, error) {
	ret := _m.Called(photo)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.InputFile) *tdlib.Ok); ok {
		r0 = rf(photo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputFile) error); ok {
		r1 = rf(photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRecoveryEmailAddress provides a mock function with given fields: password, newRecoveryEmailAddress
func (_m *Mock) SetRecoveryEmailAddress(password string, newRecoveryEmailAddress string) (*tdlib.PasswordState, error) {
	ret := _m.Called(password, newRecoveryEmailAddress)

	var r0 *tdlib.PasswordState
	if rf, ok := ret.Get(0).(func(string, string) *tdlib.PasswordState); ok {
		r0 = rf(password, newRecoveryEmailAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.PasswordState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(password, newRecoveryEmailAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetScopeNotificationSettings provides a mock function with given fields: scope, notificationSettings
func (_m *Mock) SetScopeNotificationSettings(scope tdlib.NotificationSettingsScope, notificationSettings *tdlib.ScopeNotificationSettings) (*tdlib.Ok, error) {
	ret := _m.Called(scope, notificationSettings)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.NotificationSettingsScope, *tdlib.ScopeNotificationSettings) *tdlib.Ok); ok {
		r0 = rf(scope, notificationSettings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.NotificationSettingsScope, *tdlib.ScopeNotificationSettings) error); ok {
		r1 = rf(scope, notificationSettings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStickerPositionInSet provides a mock function with given fields: sticker, position
func (_m *Mock) SetStickerPositionInSet(sticker tdlib.InputFile, position int32) (*tdlib.Ok, error) {
	ret := _m.Called(sticker, position)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.InputFile, int32) *tdlib.Ok); ok {
		r0 = rf(sticker, position)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputFile, int32) error); ok {
		r1 = rf(sticker, position)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSupergroupStickerSet provides a mock function with given fields: supergroupId, stickerSetId
func (_m *Mock) SetSupergroupStickerSet(supergroupId int32, stickerSetId tdlib.JSONInt64) (*tdlib.Ok, error) {
	ret := _m.Called(supergroupId, stickerSetId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, tdlib.JSONInt64) *tdlib.Ok); ok {
		r0 = rf(supergroupId, stickerSetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, tdlib.JSONInt64) error); ok {
		r1 = rf(supergroupId, stickerSetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSupergroupUsername provides a mock function with given fields: supergroupId, username
func (_m *Mock) SetSupergroupUsername(supergroupId int32, username string) (*tdlib.Ok, error) {
	ret := _m.Called(supergroupId, username)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, string) *tdlib.Ok); ok {
		r0 = rf(supergroupId, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, string) error); ok {
		r1 = rf(supergroupId, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTdlibParameters provides a mock function with given fields: parameters
func (_m *Mock) SetTdlibParameters(parameters *tdlib.TdlibParameters) (*tdlib.Ok, error) {
	ret := _m.Called(parameters)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(*tdlib.TdlibParameters) *tdlib.Ok); ok {
		r0 = rf(parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.TdlibParameters) error); ok {
		r1 = rf(parameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserPrivacySettingRules provides a mock function with given fields: setting, rules
func (_m *Mock) SetUserPrivacySettingRules(setting tdlib.UserPrivacySetting, rules *tdlib.UserPrivacySettingRules) (*tdlib.Ok, error) {
	ret := _m.Called(setting, rules)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.UserPrivacySetting, *tdlib.UserPrivacySettingRules) *tdlib.Ok); ok {
		r0 = rf(setting, rules)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.UserPrivacySetting, *tdlib.UserPrivacySettingRules) error); ok {
		r1 = rf(setting, rules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUsername provides a mock function with given fields: username
func (_m *Mock) SetUsername(username string) (*tdlib.Ok, error) {
	ret := _m.Called(username)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SharePhoneNumber provides a mock function with given fields: userId
func (_m *Mock) SharePhoneNumber(userId int32) (*tdlib.Ok, error) {
	ret := _m.Called(userId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopPoll provides a mock function with given fields: chatId, messageId, replyMarkup
func (_m *Mock) StopPoll(chatId int64, messageId int64, replyMarkup tdlib.ReplyMarkup) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, messageId, replyMarkup)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int64, tdlib.ReplyMarkup) *tdlib.Ok); ok {
		r0 = rf(chatId, messageId, replyMarkup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, tdlib.ReplyMarkup) error); ok {
		r1 = rf(chatId, messageId, replyMarkup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SynchronizeLanguagePack provides a mock function with given fields: languagePackId
func (_m *Mock) SynchronizeLanguagePack(languagePackId string) (*tdlib.Ok, error) {
	ret := _m.Called(languagePackId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string) *tdlib.Ok); ok {
		r0 = rf(languagePackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(languagePackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateAllOtherSessions provides a mock function with given fields:
func (_m *Mock) TerminateAllOtherSessions() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSession provides a mock function with given fields: sessionId
func (_m *Mock) TerminateSession(sessionId tdlib.JSONInt64) (*tdlib.Ok, error) {
	ret := _m.Called(sessionId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64) *tdlib.Ok); ok {
		r0 = rf(sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64) error); ok {
		r1 = rf(sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestCallBytes provides a mock function with given fields: x
func (_m *Mock) TestCallBytes(x []byte) (*tdlib.TestBytes, error) {
	ret := _m.Called(x)

	var r0 *tdlib.TestBytes
	if rf, ok := ret.Get(0).(func([]byte) *tdlib.TestBytes); ok {
		r0 = rf(x)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TestBytes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(x)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestCallEmpty provides a mock function with given fields:
func (_m *Mock) TestCallEmpty() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestCallString provides a mock function with given fields: x
func (_m *Mock) TestCallString(x string) (*tdlib.TestString, error) {
	ret := _m.Called(x)

	var r0 *tdlib.TestString
	if rf, ok := ret.Get(0).(func(string) *tdlib.TestString); ok {
		r0 = rf(x)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TestString)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(x)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestCallVectorInt provides a mock function with given fields: x
func (_m *Mock) TestCallVectorInt(x []int32) (*tdlib.TestVectorInt, error) {
	ret := _m.Called(x)

	var r0 *tdlib.TestVectorInt
	if rf, ok := ret.Get(0).(func([]int32) *tdlib.TestVectorInt); ok {
		r0 = rf(x)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TestVectorInt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(x)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestCallVectorIntObject provides a mock function with given fields: x
func (_m *Mock) TestCallVectorIntObject(x []tdlib.TestInt) (*tdlib.TestVectorIntObject, error) {
	ret := _m.Called(x)

	var r0 *tdlib.TestVectorIntObject
	if rf, ok := ret.Get(0).(func([]tdlib.TestInt) *tdlib.TestVectorIntObject); ok {
		r0 = rf(x)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TestVectorIntObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]tdlib.TestInt) error); ok {
		r1 = rf(x)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestCallVectorString provides a mock function with given fields: x
func (_m *Mock) TestCallVectorString(x []string) (*tdlib.TestVectorString, error) {
	ret := _m.Called(x)

	var r0 *tdlib.TestVectorString
	if rf, ok := ret.Get(0).(func([]string) *tdlib.TestVectorString); ok {
		r0 = rf(x)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TestVectorString)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(x)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestCallVectorStringObject provides a mock function with given fields: x
func (_m *Mock) TestCallVectorStringObject(x []tdlib.TestString) (*tdlib.TestVectorStringObject, error) {
	ret := _m.Called(x)

	var r0 *tdlib.TestVectorStringObject
	if rf, ok := ret.Get(0).(func([]tdlib.TestString) *tdlib.TestVectorStringObject); ok {
		r0 = rf(x)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TestVectorStringObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]tdlib.TestString) error); ok {
		r1 = rf(x)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestGetDifference provides a mock function with given fields:
func (_m *Mock) TestGetDifference() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestNetwork provides a mock function with given fields:
func (_m *Mock) TestNetwork() (*tdlib.Ok, error) {
	ret := _m.Called()

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func() *tdlib.Ok); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestProxy provides a mock function with given fields: server, port, typeParam, dcId, timeout
func (_m *Mock) TestProxy(server string, port int32, typeParam tdlib.ProxyType, dcId int32, timeout float64) (*tdlib.Ok, error) {
	ret := _m.Called(server, port, typeParam, dcId, timeout)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(string, int32, tdlib.ProxyType, int32, float64) *tdlib.Ok); ok {
		r0 = rf(server, port, typeParam, dcId, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int32, tdlib.ProxyType, int32, float64) error); ok {
		r1 = rf(server, port, typeParam, dcId, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestReturnError provides a mock function with given fields: error
func (_m *Mock) TestReturnError(err *tdlib.Error) (*tdlib.Error, error) {
	ret := _m.Called(err)

	var r0 *tdlib.Error
	if rf, ok := ret.Get(0).(func(*tdlib.Error) *tdlib.Error); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Error)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tdlib.Error) error); ok {
		r1 = rf(err)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestSquareInt provides a mock function with given fields: x
func (_m *Mock) TestSquareInt(x int32) (*tdlib.TestInt, error) {
	ret := _m.Called(x)

	var r0 *tdlib.TestInt
	if rf, ok := ret.Get(0).(func(int32) *tdlib.TestInt); ok {
		r0 = rf(x)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.TestInt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(x)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestUseUpdate provides a mock function with given fields:
func (_m *Mock) TestUseUpdate() (tdlib.Update, error) {
	ret := _m.Called()

	var r0 tdlib.Update
	if rf, ok := ret.Get(0).(func() tdlib.Update); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tdlib.Update)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleChatDefaultDisableNotification provides a mock function with given fields: chatId, defaultDisableNotification
func (_m *Mock) ToggleChatDefaultDisableNotification(chatId int64, defaultDisableNotification bool) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, defaultDisableNotification)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, bool) *tdlib.Ok); ok {
		r0 = rf(chatId, defaultDisableNotification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, bool) error); ok {
		r1 = rf(chatId, defaultDisableNotification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleChatIsMarkedAsUnread provides a mock function with given fields: chatId, isMarkedAsUnread
func (_m *Mock) ToggleChatIsMarkedAsUnread(chatId int64, isMarkedAsUnread bool) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, isMarkedAsUnread)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, bool) *tdlib.Ok); ok {
		r0 = rf(chatId, isMarkedAsUnread)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, bool) error); ok {
		r1 = rf(chatId, isMarkedAsUnread)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleChatIsPinned provides a mock function with given fields: chatId, isPinned
func (_m *Mock) ToggleChatIsPinned(chatId int64, isPinned bool) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, isPinned)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, bool) *tdlib.Ok); ok {
		r0 = rf(chatId, isPinned)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, bool) error); ok {
		r1 = rf(chatId, isPinned)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleSupergroupIsAllHistoryAvailable provides a mock function with given fields: supergroupId, isAllHistoryAvailable
func (_m *Mock) ToggleSupergroupIsAllHistoryAvailable(supergroupId int32, isAllHistoryAvailable bool) (*tdlib.Ok, error) {
	ret := _m.Called(supergroupId, isAllHistoryAvailable)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, bool) *tdlib.Ok); ok {
		r0 = rf(supergroupId, isAllHistoryAvailable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, bool) error); ok {
		r1 = rf(supergroupId, isAllHistoryAvailable)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleSupergroupSignMessages provides a mock function with given fields: supergroupId, signMessages
func (_m *Mock) ToggleSupergroupSignMessages(supergroupId int32, signMessages bool) (*tdlib.Ok, error) {
	ret := _m.Called(supergroupId, signMessages)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32, bool) *tdlib.Ok); ok {
		r0 = rf(supergroupId, signMessages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, bool) error); ok {
		r1 = rf(supergroupId, signMessages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferChatOwnership provides a mock function with given fields: chatId, userId, password
func (_m *Mock) TransferChatOwnership(chatId int64, userId int32, password string) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, userId, password)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, int32, string) *tdlib.Ok); ok {
		r0 = rf(chatId, userId, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int32, string) error); ok {
		r1 = rf(chatId, userId, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnblockUser provides a mock function with given fields: userId
func (_m *Mock) UnblockUser(userId int32) (*tdlib.Ok, error) {
	ret := _m.Called(userId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int32) *tdlib.Ok); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpinChatMessage provides a mock function with given fields: chatId
func (_m *Mock) UnpinChatMessage(chatId int64) (*tdlib.Ok, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Ok); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeBasicGroupChatToSupergroupChat provides a mock function with given fields: chatId
func (_m *Mock) UpgradeBasicGroupChatToSupergroupChat(chatId int64) (*tdlib.Chat, error) {
	ret := _m.Called(chatId)

	var r0 *tdlib.Chat
	if rf, ok := ret.Get(0).(func(int64) *tdlib.Chat); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: file, fileType, priority
func (_m *Mock) UploadFile(file tdlib.InputFile, fileType tdlib.FileType, priority int32) (*tdlib.File, error) {
	ret := _m.Called(file, fileType, priority)

	var r0 *tdlib.File
	if rf, ok := ret.Get(0).(func(tdlib.InputFile, tdlib.FileType, int32) *tdlib.File); ok {
		r0 = rf(file, fileType, priority)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.InputFile, tdlib.FileType, int32) error); ok {
		r1 = rf(file, fileType, priority)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadStickerFile provides a mock function with given fields: userId, pngSticker
func (_m *Mock) UploadStickerFile(userId int32, pngSticker tdlib.InputFile) (*tdlib.File, error) {
	ret := _m.Called(userId, pngSticker)

	var r0 *tdlib.File
	if rf, ok := ret.Get(0).(func(int32, tdlib.InputFile) *tdlib.File); ok {
		r0 = rf(userId, pngSticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, tdlib.InputFile) error); ok {
		r1 = rf(userId, pngSticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateOrderInfo provides a mock function with given fields: chatId, messageId, orderInfo, allowSave
func (_m *Mock) ValidateOrderInfo(chatId int64, messageId int64, orderInfo *tdlib.OrderInfo, allowSave bool) (*tdlib.ValidatedOrderInfo, error) {
	ret := _m.Called(chatId, messageId, orderInfo, allowSave)

	var r0 *tdlib.ValidatedOrderInfo
	if rf, ok := ret.Get(0).(func(int64, int64, *tdlib.OrderInfo, bool) *tdlib.ValidatedOrderInfo); ok {
		r0 = rf(chatId, messageId, orderInfo, allowSave)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.ValidatedOrderInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, *tdlib.OrderInfo, bool) error); ok {
		r1 = rf(chatId, messageId, orderInfo, allowSave)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewMessages provides a mock function with given fields: chatId, messageIds, forceRead
func (_m *Mock) ViewMessages(chatId int64, messageIds []int64, forceRead bool) (*tdlib.Ok, error) {
	ret := _m.Called(chatId, messageIds, forceRead)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(int64, []int64, bool) *tdlib.Ok); ok {
		r0 = rf(chatId, messageIds, forceRead)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, []int64, bool) error); ok {
		r1 = rf(chatId, messageIds, forceRead)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewTrendingStickerSets provides a mock function with given fields: stickerSetIds
func (_m *Mock) ViewTrendingStickerSets(stickerSetIds []tdlib.JSONInt64) (*tdlib.Ok, error) {
	ret := _m.Called(stickerSetIds)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func([]tdlib.JSONInt64) *tdlib.Ok); ok {
		r0 = rf(stickerSetIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]tdlib.JSONInt64) error); ok {
		r1 = rf(stickerSetIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteGeneratedFilePart provides a mock function with given fields: generationId, offset, data
func (_m *Mock) WriteGeneratedFilePart(generationId tdlib.JSONInt64, offset int32, data []byte) (*tdlib.Ok, error) {
	ret := _m.Called(generationId, offset, data)

	var r0 *tdlib.Ok
	if rf, ok := ret.Get(0).(func(tdlib.JSONInt64, int32, []byte) *tdlib.Ok); ok {
		r0 = rf(generationId, offset, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tdlib.Ok)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tdlib.JSONInt64, int32, []byte) error); ok {
		r1 = rf(generationId, offset, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
